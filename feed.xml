<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="http://blog.jln.co/feed.xml" rel="self" type="application/atom+xml" /><link href="http://blog.jln.co/" rel="alternate" type="text/html" /><updated>2016-06-19T14:21:06+08:00</updated><id>http://blog.jln.co/</id><title>Le murmure de Julian</title><subtitle>朱隸安貓囈語錄</subtitle><entry><title>[Golang] 一個簡單的Mongo db proxy</title><link href="http://blog.jln.co/golang-%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84mongo-db-proxy/" rel="alternate" type="text/html" title="[Golang] 一個簡單的Mongo db proxy" /><published>2016-06-19T13:17:04+08:00</published><updated>2016-06-19T13:17:04+08:00</updated><id>http://blog.jln.co/[golang]-一個簡單的mongo-db-proxy</id><content type="html" xml:base="http://blog.jln.co/golang-%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84mongo-db-proxy/">&lt;p&gt;之前被Parse搞的半死, 一直很好奇它的API到Mongodb的request之間到底是怎樣的對應&lt;/p&gt;

&lt;p&gt;要弄清楚這個其實也不難, 把Mongodb的profiler全打開去看log就好了(&lt;code class=&quot;highlighter-rouge&quot;&gt;db.setProfilingLevel(2)&lt;/code&gt;), 但這也是有缺點, profiler會寫到&lt;code class=&quot;highlighter-rouge&quot;&gt;system.profile&lt;/code&gt;這個collection去, 而它是固定大小, 不能無限制的放, 再加上它還要多寫入這段, 多多少少影響效能&lt;/p&gt;

&lt;p&gt;我需要的是一個從外部來觀察的工具, 不會影響到DB本身, 並且也可以將網路本身所花費的時間也包含進去, 所以想到的是在中間插一個proxy server&lt;/p&gt;

&lt;p&gt;在現成的工具找到一個叫&lt;a href=&quot;https://github.com/christkv/mongodb-proxy&quot;&gt;MonoDB Proxy&lt;/a&gt;的工具, 這是用nodejs寫的, 勉強可以, 也證明了這個方法是可行的, 但這工具雖然有做到代理這部份, 但在log部分, 由於它並未解析bson, 所以詳細的內容並不好看, 所以就自己來寫一個&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;功能需求&lt;/h4&gt;
&lt;ol&gt;
  &lt;li&gt;支援&lt;a href=&quot;https://docs.mongodb.com/manual/reference/mongodb-wire-protocol/&quot;&gt;mongodb wire protocol&lt;/a&gt;, 而不是只是單純的轉送資料&lt;/li&gt;
  &lt;li&gt;印出request跟response內JSON的內容&lt;/li&gt;
  &lt;li&gt;要能夠知道每個request所需要的時間(含網路)&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-1&quot;&gt;成品&lt;/h4&gt;
&lt;p&gt;最後寫出的的成品在這: &lt;a href=&quot;https://github.com/julianshen/mongoproxy&quot;&gt;https://github.com/julianshen/mongoproxy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;整個還蠻簡單的:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;wire.go 實作wire protocol&lt;/li&gt;
  &lt;li&gt;proxy.go 實作從client收資料並轉寫到server端&lt;/li&gt;
  &lt;li&gt;cmd/mp/main.go command line主程式的部分&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-2&quot;&gt;使用方法&lt;/h4&gt;
&lt;p&gt;這個工具是用Go寫的, 所以使用之前需要先安裝go&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;安裝&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;go get julianshen/mongoproxy/mp&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;這個步驟做完後, 就可以把mp這個指令裝好了, 確定 $GOPATH/bin是在你路徑內, mp這個檔也是在那邊&lt;/p&gt;

&lt;h5 id=&quot;section-4&quot;&gt;使用&lt;/h5&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mp --port=6001 --remote=mydb:27017 --response&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;其中:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;port是你這個proxy server的服務點&lt;/li&gt;
  &lt;li&gt;remote是遠端的mongodb (host:port)&lt;/li&gt;
  &lt;li&gt;Reponse是需不需要log回傳的部分&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;wire-protocol&quot;&gt;實作Wire protocol&lt;/h4&gt;

&lt;p&gt;本來覺得Wire protocol會蠻複雜的, 結果, 其實是蠻簡單的&lt;/p&gt;

&lt;p&gt;所有的wire protocol request都會有一個標準的表頭:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MsgHeader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;messageLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// total message size, including this
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;requestID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// identifier for this message
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;responseTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// requestID from the original request
&lt;/span&gt;                           &lt;span class=&quot;c1&quot;&gt;//   (used in responses from db)
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;opCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// request type - see table below
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;對應golang, 我定義成這樣:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MsgHeader&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageLength&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// total message size, including this&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestID&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;     &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// identifier for this message&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ResponseTo&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// requestID from the original request&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;//   (used in responses from db)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
	&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Opcode&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// request type - see table below&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因為一開始就可以讀到整個訊息長度的, 所以就蠻好解析的, wire protocol的實作我是有參考了&lt;a href=&quot;https://github.com/facebookgo/dvara&quot;&gt;dvara&lt;/a&gt;, 本來是有想拿它的code來改, 但看了一下發現它也沒完整實作wire protocol, 秉著自己也來了解一下這部份的想法, 就重頭自己刻了&lt;/p&gt;

&lt;p&gt;跟&lt;a href=&quot;https://github.com/facebookgo/dvara&quot;&gt;dvara&lt;/a&gt;不同的地方是, 我用go的binary package來讀header而非自己刻一個, binary.Read的確是一個蠻好用的工具, 用底下的code就可以讀出header這個資料結構:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MsgHeader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LittleEndian&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外, 除header外, 各request的所帶的欄位各自不同, 這部份的作法就是定好各個所需的資料結構, 用reflection的方式來讀取各相關資料:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ValueOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// 根據資料結構內定義的每個欄位用相關的方法讀取&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NumField&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bytesRead&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MessageLength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ErrorWrongLen&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reflect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypeOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readDoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bufferReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;bson&quot;&gt;解析bson&lt;/h4&gt;

&lt;p&gt;這部份就沒再重新造輪子了, 直接用golang著名的mongodb driver mgo裡的bson lib: https://godoc.org/gopkg.in/mgo.v2/bson , 這個bson lib已經寫的很不錯了, 直接拿來用即可&lt;/p&gt;

&lt;p&gt;在這個package內, 泛用的bson資料結構有兩種: &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2/bson#M&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bson.M&lt;/code&gt;&lt;/a&gt; 和 &lt;a href=&quot;https://godoc.org/gopkg.in/mgo.v2/bson#D&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bson.D&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這兩個是不同用途的,仔細看一下M跟D的定義:&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;和&lt;/p&gt;

&lt;div class=&quot;language-go highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DocElem&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果你是要把解析出的資料用map來操作, M是蠻方便的, 一開始我也是依著之前我寫相關的東西的習慣用M, 不過這邊卻是不可以用M的, 這也是我碰到bug的地方&lt;/p&gt;

&lt;p&gt;由於M解析出的是Map, 所以每個field的順序它並沒記住, 但偏偏在wire protocol裡, 尤其是 $cmd, 順序是重要的, 所以Unmarshal出的M再Marshal回去, 順序可能不是原本的順序了, 而這在這個proxy應用上, client寫什麼東西過來就要寫什麼到server才不至於出錯&lt;/p&gt;

&lt;h4 id=&quot;debug&quot;&gt;測試和Debug&lt;/h4&gt;

&lt;p&gt;我是用&lt;a href=&quot;https://www.wireshark.org&quot;&gt;Wireshark&lt;/a&gt;來驗證我的實作有沒問題, Wireshark預設會把到27017 port的資料解析成wire protocol的內容供閱讀, 當然也可以自己手動請它解析&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;其他應用&lt;/h4&gt;
&lt;p&gt;這樣的proxy應該可以不只應用在debug, 像是Parse open source的&lt;a href=&quot;https://github.com/facebookgo/dvara&quot;&gt;dvara&lt;/a&gt;, 它也是利用了proxy來做connection pooling, 應該也可以用在request routing和caching的應用上&lt;/p&gt;</content><category term="golang" /><category term="mongodb" /><summary>之前被Parse搞的半死, 一直很好奇它的API到Mongodb的request之間到底是怎樣的對應</summary></entry><entry><title>又再把Blog搬家了</title><link href="http://blog.jln.co/%E5%8F%88%E5%86%8D%E6%8A%8Ablog%E6%90%AC%E5%AE%B6%E4%BA%86/" rel="alternate" type="text/html" title="又再把Blog搬家了" /><published>2016-06-16T20:37:58+08:00</published><updated>2016-06-16T20:37:58+08:00</updated><id>http://blog.jln.co/又再把blog搬家了</id><content type="html" xml:base="http://blog.jln.co/%E5%8F%88%E5%86%8D%E6%8A%8Ablog%E6%90%AC%E5%AE%B6%E4%BA%86/">&lt;p&gt;一直把Blog當作紀錄一些事情用的地方, 想法, 或是學習過的一些東西, 雖然不是很頻繁的在寫, 不過也寫了好幾年了, 從以前到現在, 換過好幾次平台, 從自己架的wordpress, 到posterous, blogger, 一直到現在用的Tumblr, 這中間最喜歡的還是posterous, 不過它已經不存在了, 而Tumblr也用了好一陣子了, 雖然加減湊合著用好像還OK, 不過編輯上也一直不是那麼順手, 尤其是貼source code, 因此也一直想把它換掉&lt;/p&gt;

&lt;p&gt;那 &lt;strong&gt;medium&lt;/strong&gt; 呢? medium我還沒很有動力去搞懂它, 會在上面看一些文章沒錯, 但把Blog移到上面去, 好像也沒啥動力&lt;/p&gt;

&lt;p&gt;考慮了好一陣子, 不過最後還是把整個Blog遷移了, 反正現在有一個自己的domain (&lt;em&gt;blog.jln.co&lt;/em&gt;), 搬家不用改地址!&lt;/p&gt;

&lt;p&gt;遷移之前, 想了幾個我的需求:&lt;/p&gt;

&lt;h4 id=&quot;section&quot;&gt;需求&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;有方便的編輯器可以用, 最好可以支援mark down, 打html有點麻煩, WYSIWYG編輯器通常效率也不高&lt;/li&gt;
  &lt;li&gt;貼code好貼, 也方便閱讀&lt;/li&gt;
  &lt;li&gt;模版好編輯, 至少我要能知道怎麼改模版&lt;/li&gt;
  &lt;li&gt;好預覽&lt;/li&gt;
  &lt;li&gt;能同步到各個social network, 至少Facebook, Twitter, 也能同步到我原本的Tumblr和blogger&lt;/li&gt;
  &lt;li&gt;要能夠友善支援Open graph和Twitter card, 對每次share的FB的醜醜文字版型實在不喜歡&lt;/li&gt;
  &lt;li&gt;好轉移, 好備份, 有版本控制更好!&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;section-1&quot;&gt;解決方案&lt;/h4&gt;

&lt;p&gt;現成的blog service, 好的什麼都要錢(ghost, wordpress), 免費的大概也都被我用過了, 自己架, 又得管server, 後來想想, blog都是靜態的網頁, 也真的不需要一個很複雜的系統, 這時候就想到一個解決方案, 那就是Github&lt;/p&gt;

&lt;p&gt;Github有一個&lt;a href=&quot;https://pages.github.com&quot;&gt;Github pages&lt;/a&gt;的服務, 可以讓你host你的靜態網頁, 所以只要有一個方法可以把Blog轉成靜態網頁就可以了, 這個還蠻Geek的方式感覺就蠻適合我的&lt;/p&gt;

&lt;p&gt;找到了幾個方法轉blog:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://octopress.org&quot;&gt;Octopress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hexo.io/zh-tw/&quot;&gt;Hexo&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Octopress是已經完結不再維護了, 所以就Jekyll和Hexo兩個在抉擇, 兩者都有蠻多的主題跟模版功能, 也有不少plugins&lt;/p&gt;

&lt;p&gt;Hexo是台灣精品, 而且是nodekjs寫的, 語言上我比較熟, 要改比較好改,而Jekyll是Ruby寫的, 我跟Ruby很不熟, 但它跟Github pages結合緊密, 而且已經有tool可以從Tumblr移轉內容過來了, 最後我選擇了Jekyll, 選擇Jekyll的原因是&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Github page直接原生支援, 只要把md檔push上去後, 就會自動產生網頁(不過後來我還是先在自己電腦產生完再push, 後面再說原因)&lt;/li&gt;
  &lt;li&gt;找到一個適合的也不太難改的theme, 就懶得去翻Hexo的了, 而且找到的那個對Open graph和Twitter card的支援也不錯, 不用改太多&lt;/li&gt;
  &lt;li&gt;原生的Tumblr import tool&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;不過整個也花了不少個晚上修改, 又花了一個晚上才能寫完這篇紀錄 @@&lt;/p&gt;

&lt;h4 id=&quot;jekyll&quot;&gt;安裝Jekyll&lt;/h4&gt;
&lt;p&gt;網路上可以找到很多安裝Jekyll的文章, 這邊就不說太多, 我試了兩個不同的作法:&lt;/p&gt;

&lt;h5 id=&quot;section-2&quot;&gt;作法 1&lt;/h5&gt;
&lt;p&gt;這是最基本的作法&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;先用 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install jekyll&lt;/code&gt; 安裝jekyll&lt;/li&gt;
  &lt;li&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new myblog&lt;/code&gt; 在myblog目錄產生一個基本的網站&lt;/li&gt;
  &lt;li&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll s&lt;/code&gt; 會在 localhost:4000 開啟一個服務, 這時就透過browser可以看看你的blog長怎樣了&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;這方法的缺點是, 套用主題時, 還得改一堆東西, 有點麻煩&lt;/p&gt;

&lt;h5 id=&quot;section-3&quot;&gt;作法 2&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;一樣先裝jekyll&lt;/li&gt;
  &lt;li&gt;找到一個人家做好的theme (我是用&lt;a href=&quot;https://github.com/mmistakes/hpstr-jekyll-theme&quot;&gt;hpstr&lt;/a&gt;這個), clone下來改, 因為大部分的都已經把他用的plugin之類的都先寫好在config了, 就省不少事, 建議找theme要注意其對應的Jekyll版本, 像我裝的Jekyll是3, 所以找的是適合3的&lt;/li&gt;
  &lt;li&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;gem install bundler&lt;/code&gt; 安裝bundler&lt;/li&gt;
  &lt;li&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt; 來安裝相關的plugins&lt;/li&gt;
  &lt;li&gt;用 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll s&lt;/code&gt; 看結果&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我後來採用的是作法2, 踩在人家的肩膀上比較快 :P&lt;/p&gt;

&lt;h4 id=&quot;github-pages&quot;&gt;設定github pages&lt;/h4&gt;
&lt;p&gt;這部份沒什麼難度, 創建一個專案名稱叫做 &lt;em&gt;你的名字.github.com&lt;/em&gt; , 把相關檔案放到這邊去就行了&lt;/p&gt;

&lt;p&gt;Github pages支援兩種方式, 一種是純粹的靜態網頁, 就是把html跟其他相關檔案丟到這邊就好(master branch), 另一種方式就是Jekyll, Jekyll的部分只要把前一個動作的檔案放進來就好, 它會自己幫你產生對應的靜態網頁&lt;/p&gt;

&lt;p&gt;不過第二種方法的缺點是因為Github pages只支援幾種Jekyll plugins, 而且不支援自訂的plugins(放在 &lt;em&gt;_plugins&lt;/em&gt; 目錄下的), 就算你在你自己電腦裡面跑完把產生後的 &lt;strong&gt;_site&lt;/strong&gt; 目錄一起放上去也是沒用的&lt;/p&gt;

&lt;h4 id=&quot;tumblr&quot;&gt;從Tumblr匯入之前文章&lt;/h4&gt;
&lt;p&gt;這部份沒太複雜, 是透過&lt;a href=&quot;https://github.com/jekyll/jekyll-import&quot;&gt;jekyll-import&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;安裝jekyll-import一樣可以透過&lt;code class=&quot;highlighter-rouge&quot;&gt;gem install&lt;/code&gt;來安裝, 但建議不要這樣做, 是因為他用的Tumblr API是JSONP但程式卻將它當一般JSON在解碼, 會出錯, 這部份在最新版的code有解決(害我還去追了source code), 所以抓source回來自己build比較安全&lt;/p&gt;

&lt;p&gt;裝好之後執行:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
ruby -rubygems -e &lt;span class=&quot;s1&quot;&gt;&#39;require &quot;jekyll-import&quot;;
    JekyllImport::Importers::Tumblr.run({
      &quot;url&quot;            =&amp;gt; &quot;http://blog.jln.co&quot;,
      &quot;format&quot;         =&amp;gt; &quot;html&quot;, # or &quot;md&quot;
      &quot;grab_images&quot;    =&amp;gt; true,  # whether to download images as well.
      &quot;add_highlights&quot; =&amp;gt; false,  # whether to wrap code blocks (indented 4 spaces) in a Liquid &quot;highlight&quot; tag
      &quot;rewrite_urls&quot;   =&amp;gt; false   # whether to write pages that redirect from the old Tumblr paths to the new Jekyll paths
    })&#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;它就會把文章抓回到 &lt;em&gt;_post&lt;/em&gt;的目錄下&lt;/p&gt;

&lt;h4 id=&quot;open-graph--twitter-card&quot;&gt;Open graph &amp;amp; Twitter card&lt;/h4&gt;

&lt;p&gt;如果把內容分享到Facebook或是Twitter上只有短短的文字, 不是很好看, 所以希望在這部份能夠至少加上一張圖&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mmistakes/hpstr-jekyll-theme&quot;&gt;hpstr&lt;/a&gt;這個theme已經有在 ** _includes/head.html ** 寫好OG跟Twitter card相關的tag了, 圖片(og:image)的部分, 他的規則/順序是:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Front matter 裡面設定的&lt;/li&gt;
  &lt;li&gt;_config.xml 裡的logo設定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;我希望是更自動一點, 而不是自己去設定, 所以找到一個plugin : &lt;a href=&quot;https://github.com/merlos/jekyll-auto-image&quot;&gt;jekyll-auto-image&lt;/a&gt;, 這個plugin聰明一點, 他的順序是:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;內文內出現的第一張圖&lt;/li&gt;
  &lt;li&gt;_config.xml 裡面設定的圖&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但這樣還稍嫌單調一些, 我想要達成的是:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;內文內出現的第一張圖&lt;/li&gt;
  &lt;li&gt;根據標籤選的對應的圖(比如說把我go語言相關的設成Gopher的圖片), 這樣不會每個都一樣, 比較有變化一點&lt;/li&gt;
  &lt;li&gt;預設的圖&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;再加上auto image裡面關於image的設定跟我用的theme有所衝突, 這就需要把原本的auto image改一下了&lt;/p&gt;

&lt;p&gt;我新增一個rb檔, 放在 ** _plugins **目錄下, 內容如下:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;jekyll&quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Jekyll&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AutoImageGenerator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Generator&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;pages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;image1&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# Now do the same with posts&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;posts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;docs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts &quot;hola&quot;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts Jekyll::VERSION&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts post.class&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts post.inspect&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts post.data.inspect&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts &quot;-----&quot;      &lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts post.output&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#puts &quot;----&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;thumb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# generate&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_image&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;thumb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;thumb&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# convert the contents to html, and extract the first &amp;lt;img src=&quot;&quot; apearance&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# I know, it&#39;s not efficient, but rather easy to implement :)&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Document&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# for jekyll 3.0 posts &amp;amp; collections&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;htmled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Jekyll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Renderer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;site_payload&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;convert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;htmled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;transform&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# for jekyll 2.x pages&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;img_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmled&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/&amp;lt;img.*\ssrc=[\&quot;\&#39;]([\S.]+)[\&quot;\&#39;]/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;img_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;tags&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;imagemap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;imagemap&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagemap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;imagemap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;downcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/^http/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/images/&#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;logo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;logo&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# module&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;這版就有達到我想要的目的, 但這不代表問題解了, 反而是問題的開始, 前面有說過github只支援特定的plugins, 所以怎樣這段改過的plugin都不會被它執行到, 唯一能做的解法就是改用靜態網頁的方式&lt;/p&gt;

&lt;p&gt;jekyll產生的靜態網頁都放在 _site 目錄下, 所以真的要進master branch只有這裡面的, 其他都不用, 所以要先在本地端用 &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll b&lt;/code&gt;去產生相關的靜態網頁到 _site裡再上傳&lt;/p&gt;

&lt;p&gt;那怎測試呢? 一開始為了測試方便我都以本地端的server做測試, 但如果要測試Facebook share的話則需要能夠讓Facebook 連過來抓取網頁來分析, 但這點在區網不是很方便, 所以就帶入了 &lt;a href=&quot;https://ngrok.com&quot;&gt;ngrok&lt;/a&gt; 這個工具, 這工具就是提供給你一個外部的網址, 你在本地端跑了ngrok這程式後, 就有一個可以對應你本地端的server, 還蠻好用的&lt;/p&gt;

&lt;h4 id=&quot;section-4&quot;&gt;自動發布到社群網站&lt;/h4&gt;
&lt;p&gt;這當然是用&lt;a href=&quot;http://ifttt.com&quot;&gt;ifttt&lt;/a&gt;囉, 因為有用到jekyll-feed這個plugin, 所以會產生一個feed.xml的檔案, 所以就利用ifttt的feed channel來設定觸發&lt;/p&gt;

&lt;h4 id=&quot;section-5&quot;&gt;結語&lt;/h4&gt;
&lt;p&gt;本來明明不想花太多功夫的, 結果不但花了很多功夫, 還花了一頁來紀錄這篇 orz&lt;/p&gt;</content><category term="Blog" /><category term="Jekyll" /><category term="Ruby" /><summary>一直把Blog當作紀錄一些事情用的地方, 想法, 或是學習過的一些東西, 雖然不是很頻繁的在寫, 不過也寫了好幾年了, 從以前到現在, 換過好幾次平台, 從自己架的wordpress, 到posterous, blogger, 一直到現在用的Tumblr, 這中間最喜歡的還是posterous, 不過它已經不存在了, 而Tumblr也用了好一陣子了, 雖然加減湊合著用好像還OK, 不過編輯上也一直不是那麼順手, 尤其是貼source code, 因此也一直想把它換掉</summary></entry><entry><title>[筆記] 移植Parse Push</title><link href="http://blog.jln.co/%E7%AD%86%E8%A8%98-%E7%A7%BB%E6%A4%8Dparse-push/" rel="alternate" type="text/html" title="[筆記] 移植Parse Push" /><published>2016-02-25T01:13:36+08:00</published><updated>2016-02-25T01:13:36+08:00</updated><id>http://blog.jln.co/筆記-移植parse-push</id><content type="html" xml:base="http://blog.jln.co/%E7%AD%86%E8%A8%98-%E7%A7%BB%E6%A4%8Dparse-push/">&lt;p&gt;今天追完了綠箭, 該來點功課, 不過今天忘了買啤酒了:(&lt;/p&gt;

&lt;p&gt;Parse Push, 這功能無疑應該是Parse本身比較受歡迎的部分, 既然Parse明年要關門大吉了,這部份也是必須要搬家的, 但搬家比較麻煩的不是要搬到哪去, 而是之前累積的使用者, 總不希望一搬了就找不到他們了, Parse Push支援了包含了Google的GCM和Apple的APNS,以及他們自己的PPNS,以GCM來說, 在_Installation裡面, Parse是有儲存了GCM的deviceToken, 如果你之前用的是自己的GCM Sender ID, 那這部份直接搬了就可以用了, 但如果不是, 那預設用的是Parse自己的, 這樣這些deviceToken就不能夠使用自己的Sender ID來送, 必須要用用下面的方法來補救:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;從Google的&lt;a href=&quot;https://console.developers.google.com/&quot;&gt;Developer console&lt;/a&gt;取的Sender ID跟API Key&lt;/li&gt;
&lt;li&gt;在AndroidManifest.xml加入 &lt;code&gt;&amp;lt;meta-data android:name=&quot;com.parse.push.gcm_sender_id&quot; android:value=&quot;id:12345678&quot;&amp;gt;&lt;/code&gt; (必須要以&amp;quot;id:&amp;ldquo;加上你的sender id)&lt;/li&gt;
&lt;li&gt;發布新的升級到Play store&lt;/li&gt;
&lt;li&gt;使用者更新後至少發送一次Push (如果你在Application中有去儲存Installation, 這時候因為有了新的sender, 所以deviceToken會被更新)&lt;/li&gt;
&lt;li&gt;可以用你自己的API key送給新的device token了(可以不用透過Parse console去送, 也可以用其他程式)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;這個Go的範例可以用來試驗送PUSH到你的手機上:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/julianshen/90a7b5c4a24eb13f41fa.js&quot;&gt;&lt;/script&gt;&lt;p&gt;找出你手機的deviceToken後即可用這個來驗證是否能夠成功送出push&lt;/p&gt;

&lt;p&gt;但這樣還不夠, 我們還需要一個負責幫我們送push的server, 在之前那篇&lt;a href=&quot;http://blog.jln.co/post/139174339467/%E7%AD%86%E8%A8%98-parse-%E8%87%AA%E6%95%91%E6%96%B9%E6%A1%88%E4%B9%8B%E4%B8%80-pushd&quot;&gt;Parse自救方案&lt;/a&gt;裡有提到一個Pushd, 這是其中一個作法, 不過需要改一些東西才可以符合Parse Android SDK接收的格式, 另一個作法是透過open source的&lt;a href=&quot;https://github.com/ParsePlatform/parse-server/&quot;&gt;Parse Server&lt;/a&gt;, 原本它剛一出來時, 並沒支援Push, 但後來有其他人幫它加了上去了, 但它的方式是提供了API給你送PUSH, 但一來把API server跟PUSH server放一起並不是件好事, 二來當送大量的PUSH這樣的設計並不保險(並沒有queue, 送到一半server死了就麻煩了)&lt;/p&gt;

&lt;p&gt;不過要以Parse server的為基礎拆出push的部分也不是很難, 做了一個簡單的範例: &lt;a href=&quot;https://github.com/julianshen/parse_push_js&quot;&gt;github.com/julianshen/parse_push_js&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;在這範例裡, 使用了Parse Server的ParsePushAdapter, 並且利用了Redis當作queue來做成的簡單的push server, 這樣應該就加減堪用了, 不過這邊有一個還需要再改的是, ParsePushAdapter 並不會把產生的push id回傳到上一層, 這樣要做追蹤紀錄其實有點比較不方便, 這邊還需要再加強一下&lt;/p&gt;</content><summary>今天追完了綠箭, 該來點功課, 不過今天忘了買啤酒了:(</summary></entry><entry><title>[筆記] 被冤枉的MongoDB</title><link href="http://blog.jln.co/%E7%AD%86%E8%A8%98-%E8%A2%AB%E5%86%A4%E6%9E%89%E7%9A%84mongodb/" rel="alternate" type="text/html" title="[筆記] 被冤枉的MongoDB" /><published>2016-02-18T09:23:42+08:00</published><updated>2016-02-18T09:23:42+08:00</updated><id>http://blog.jln.co/筆記-被冤枉的mongodb</id><content type="html" xml:base="http://blog.jln.co/%E7%AD%86%E8%A8%98-%E8%A2%AB%E5%86%A4%E6%9E%89%E7%9A%84mongodb/">&lt;p&gt;續&lt;a href=&quot;http://blog.jln.co/post/139117302737/%E7%AD%86%E8%A8%98-deploy-mongodb-replica-set-to-coreosfleet&quot;&gt;前篇&lt;/a&gt; 裝好了MongoDB的Cluster後(1 Primary, 2 Secondaries)就開始進行大量的資料移轉&lt;/p&gt;

&lt;p&gt;結果資料寫到一半, 突然發現Primary換人了, 雖然因為有Secondaries, 會有人上來替代, 因為Mongo只有Primary才可以被寫入, 這使得client必須重新建立對新的primary的connection, 一度以為機器被reboot了, 但查logs並沒這現象, 後來又以為, MongoDB也太不濟了吧, 這種量級的寫入居然可以擊倒它, 結果後來查了log發現, 他的確被restart了, 只是兇手不是他, 是別人叫他去死的&lt;/p&gt;

&lt;p&gt;一切是Fleet惹的禍, 根據這篇&lt;a href=&quot;https://github.com/coreos/fleet/issues/1289&quot;&gt;Fleet engine stops units when etcd leadership change or has connectivity issues #1289&lt;/a&gt;, Fleet只要聯絡不到etcd, 就會認為不能獨活了, 就會把其他人也給殺了(可惡的殺人兇手),追根據底就是timeout設的太短了, 以至於當系統稍微(只是稍微而已)一忙, 就很容易超過timeout, 然後他就認為, 他的情人死了!(也太玻璃心了)&lt;/p&gt;

&lt;p&gt;解決方案就是延長timeout, 修改cloud-config加上如下的東西(把etcd的heartbeat跟election timeout延長, 把fleet相關的也給延長):&lt;/p&gt;

&lt;pre&gt;

#cloud-config

coreos:
  etcd2:
    heartbeat-interval: 600
    election-timeout: 6000
  fleet:
    engine-reconcile-interval: 10
    etcd-request-timeout: 5
    agent-ttl: 120s

&lt;/pre&gt;

&lt;p&gt;至於Azure上裝的coreos, cloud-config位置是在: &lt;code&gt;/var/lib/waagent/CustomData&lt;/code&gt;, 改完restart機器就好&lt;/p&gt;</content><summary>續前篇 裝好了MongoDB的Cluster後(1 Primary, 2 Secondaries)就開始進行大量的資料移轉</summary></entry><entry><title>[筆記] Parse 自救方案之一 - Pushd</title><link href="http://blog.jln.co/%E7%AD%86%E8%A8%98-parse-%E8%87%AA%E6%95%91%E6%96%B9%E6%A1%88%E4%B9%8B%E4%B8%80-pushd/" rel="alternate" type="text/html" title="[筆記] Parse 自救方案之一 - Pushd" /><published>2016-02-12T23:41:25+08:00</published><updated>2016-02-12T23:41:25+08:00</updated><id>http://blog.jln.co/筆記-parse-自救方案之一-pushd</id><content type="html" xml:base="http://blog.jln.co/%E7%AD%86%E8%A8%98-parse-%E8%87%AA%E6%95%91%E6%96%B9%E6%A1%88%E4%B9%8B%E4%B8%80-pushd/">&lt;p&gt;Parse自從宣布要收掉後, 雖然也放出open source的仿製品&lt;a href=&quot;https://github.com/ParsePlatform/parse-server&quot;&gt;Parse Server&lt;/a&gt;, 這東西不是實際上Parse真正跑得那個app server, 而是一個nodejs/express的相容版, 這個版本的故事可以看這邊 &lt;a href=&quot;https://medium.com/@newfosco/parse-2-0-600839abebdf#.vcv4l2lg2&quot;&gt;Parse 2.0&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;想當然爾, 這版本並不是完整支援Parse原本的功能, 尤其是Push, 這功能是完全沒有, 雖然說source codes放出來後, 大家熱烈的玩起來了, 最近幾天一個簡單的PUSH功能的pull request也被收錄進去了: &lt;a href=&quot;https://github.com/ParsePlatform/parse-server/pull/311&quot;&gt;Add support for push&lt;/a&gt;, 不過這畢竟比較陽春&lt;/p&gt;

&lt;p&gt;一些收費不收費的替代方案也不算少, 不過如果想自救, 自己建置自己管的話, 也是不用完全重來, &lt;a href=&quot;https://github.com/rs/pushd&quot;&gt;rs/pushd&lt;/a&gt; 這是目前看到還算蠻完整的, 採用了nodejs/coffee script + Redis, 在佈署方面也不算太難(不過也就兩個東西而已), 不過實際上的效能可能還是得測試一下(有沒好方法可以測大量的push呀?總不可能去生一堆機器)&lt;/p&gt;

&lt;p&gt;為了方便測試, 包裝成docker-compose.yml和一個方便使用的shell script: &lt;a href=&quot;https://github.com/julianshen/pushd-docker-compose-sample&quot;&gt;julianshen/pushd-docker-compose-sample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用方法:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;修改&lt;code&gt;pushd.sh&lt;/code&gt;裡跟你的app相關的push設定如GCM_KEY&lt;/li&gt;
&lt;li&gt;執行&lt;code&gt;pushd.sh up&lt;/code&gt;啟動redis和pushd兩個containers&lt;/li&gt;
&lt;li&gt;執行&lt;code&gt;pushd.sh ps&lt;/code&gt;確認是不是兩個都已經正確啟動&lt;/li&gt;
&lt;li&gt;PUSHD的port是對應到host的8081, 所以直接對8081操作即可&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下來可能要想一些方法來測試, 和把Parse的資料給串一起&lt;/p&gt;</content><summary>Parse自從宣布要收掉後, 雖然也放出open source的仿製品Parse Server, 這東西不是實際上Parse真正跑得那個app server, 而是一個nodejs/express的相容版, 這個版本的故事可以看這邊 Parse 2.0</summary></entry><entry><title>[筆記] Deploy Mongodb replica set to coreos/fleet cluster on Azure</title><link href="http://blog.jln.co/%E7%AD%86%E8%A8%98-deploy-mongodb-replica-set-to-coreosfleet/" rel="alternate" type="text/html" title="[筆記] Deploy Mongodb replica set to coreos/fleet cluster on Azure" /><published>2016-02-12T00:34:07+08:00</published><updated>2016-02-12T00:34:07+08:00</updated><id>http://blog.jln.co/筆記-deploy-mongodb-replica-set-to-coreosfleet</id><content type="html" xml:base="http://blog.jln.co/%E7%AD%86%E8%A8%98-deploy-mongodb-replica-set-to-coreosfleet/">&lt;p&gt;把我過年假期試的先來紀錄一下，這篇基本上有兩個部分:&lt;/p&gt;

&lt;p&gt;第一部份是在Azure上部署一個coreos cluster，這部份可以參考以下幾篇：&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://m.youtube.com/watch?v=wxUxtflalE4&quot;&gt;Scaling Docker #1 - High Availability Docker DevOps with CoreOS, Etcd, Fleet, Flannel &amp;amp; Nginx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/willrstern/production-docker-ha-architecture&quot;&gt;willrstern/production-docker-ha-architecture&lt;/a&gt; - 這是上一段影片用的source codes, 那段影片有好幾段, 講的蠻清楚的, 但是佈署在Digital Ocean上, 這邊我借用他的cloud-config&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/zh-tw/documentation/articles/virtual-machines-linux-coreos-how-to/&quot;&gt;如何在 Azure 上使用 CoreOS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://azure.microsoft.com/zh-tw/documentation/articles/virtual-machines-linux-coreos-fleet-get-started/&quot;&gt;開始在 Azure 上的 CoreOS VM 叢集使用 Fleet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;這邊我使用的不是Azure的classic vm而是用了resource manager，這部份 可以參考這篇：
&lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/resource-group-template-deploy/&quot;&gt;Deploy an application with Azure Resource Manager template&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要使用arm的話，首先要把模式切到arm:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;azure config mode arm&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下來得建立一個resource group:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;azure group create -n &amp;ldquo;group_name&amp;rdquo; -l &amp;ldquo;West US&amp;rdquo;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;-n 後面是這個群組的名字, -l 後面則是它所在區域&lt;/p&gt;

&lt;p&gt;接下來可以利用resource group templates來建立相關的資源, resource group template 除了可以自己寫以外(參考這邊 &lt;a href=&quot;https://azure.microsoft.com/en-us/documentation/articles/resource-group-authoring-templates/&quot;&gt;Authoring Azure Resource Manager templates&lt;/a&gt;), 也可以上&lt;a href=&quot;https://azure.microsoft.com/zh-tw/documentation/templates/&quot;&gt;Azure 快速入門範本去找現成的&lt;/a&gt;, 至於coreos + fleet, 就有一個現成的:&lt;a href=&quot;https://azure.microsoft.com/zh-tw/documentation/templates/coreos-with-fleet-multivm/&quot;&gt;Deploy a CoreOS cluster hosting Fleet&lt;/a&gt;, 它的&lt;a href=&quot;https://github.com/Azure/azure-quickstart-templates/tree/master/coreos-with-fleet-multivm&quot;&gt;source code在github上也可以找到&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;基本上應該是改一下azuredeploy.parameters.json再執行下面指令就可以:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;azure group deployment create GroupName DeploymentName &amp;ndash;template-file azuredeploy.json &amp;ndash;parameters-file azuredeploy.parameters.json&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而裡面的discovery url部分, 則是要去: &lt;a href=&quot;https://discovery.etcd.io/new?size=3&quot;&gt;https://discovery.etcd.io/new?size=3&lt;/a&gt; 產生一個貼上去&lt;/p&gt;

&lt;p&gt;但我前幾天在試的時候, 似乎它azuredeploy.json的換行有點問題(寫這篇文章時再看它已經是修正了), 以至於我執行起來有點問題, 再加上, 新的coreos stable似乎也改用etcd2取代原本的etcd, 因此我想要用另一個版本的cloud-config(即借用Scaling Docker那段影片裡用的那個cloud-config, 那個即是使用etcd2), 此外他的vm name也全是以coreos開頭的(我想要自己命名)&lt;/p&gt;

&lt;p&gt;因此, 我修改了一個自己的版本, 也放在github上: &lt;a href=&quot;https://github.com/julianshen/azure-core-fleet&quot;&gt;julianshen/azure-core-fleet&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;這版本把cloud-config獨立成一個template而非寫死在azuredeploy.json, 並借用上面所述的版本, 並且寫了一隻&lt;em&gt;paramgen.go&lt;/em&gt;來產生azuredeploy.parameters.json, discovery url不用自己去產生, 這支程式會自動幫你取得, 用法:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;em&gt;go get github.com/parnurzeal/gorequest&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;go run paramgen.go &amp;ndash;numberOfNodes 3 &amp;ndash;location &amp;ldquo;East US&amp;rdquo; &amp;ndash;newStorageAccountName &amp;ldquo;mystorageaccount&amp;rdquo; &amp;ndash;vmSize &amp;ldquo;Standard_A1&amp;rdquo; &amp;ndash;adminUserName &amp;ldquo;admin&amp;rdquo; &amp;ndash;vmNamePrefix &amp;ldquo;myvm&amp;rdquo; &amp;ndash;sshKeyFile ~/.ssh/azure_rsa.pub&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;參數如下:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;numberOfNodes 要開的vm數量&lt;/li&gt;
&lt;li&gt;location vm位置(還是得跟你的resource group所在位置一樣)&lt;/li&gt;
&lt;li&gt;newStorageAccountName storage account name&lt;/li&gt;
&lt;li&gt;vmSize VM的大小&lt;/li&gt;
&lt;li&gt;adminUserName 管理者的名稱&lt;/li&gt;
&lt;li&gt;vmNamePrefix vm名字的開頭&lt;/li&gt;
&lt;li&gt;sshKeyFile ssk key的檔案位置(如果沒有,預設是~/.ssh/id_rsa.pub)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接著跑前面提到那段:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;azure group deployment create GroupName DeploymentName &amp;ndash;template-file azuredeploy.json &amp;ndash;parameters-file azuredeploy.parameters.json&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;執行結束後就會得到三頭牛, ㄟ,是三台VM(取決於numberOfNodes數目)及相關資源, 而且依據這個範本, 這三台VM跑得都會是coreos, 擁有我們指定的cloud-config, 這cloud-config會在coreos上啟用etcd2, fleet, 和flanneld (如Scaling Docker那段裡面的一樣)&lt;/p&gt;

&lt;p&gt;用ARM的模式的好處是,這三台VM會是在同一個虛擬網路上, 有各自的私有的IP, 當然也有各自的公開IP&lt;/p&gt;

&lt;p&gt;裝好後, 有碰到一個問題, 就是不知道為何, 重啟vm時, 會碰到etcd也跑起來了取代了etcd2, 而etcdctl 2.0.9又跟etcd有相容性問題, 導致fleet出問題, 因此在原本的cloud-config加上了:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;&lt;li&gt;name: etcd.service
    mask: true&lt;/li&gt;
  &lt;/ul&gt;&lt;/blockquote&gt;

&lt;p&gt;這樣一來etcd就不會去執行了&lt;/p&gt;

&lt;p&gt;再來就要測試剛剛的佈署是不是成功沒問題了&lt;/p&gt;

&lt;p&gt;首先我們需要fleetctl, 如果不希望登入vm就可以使用, 還是可以在本地端安裝, 在mac下可用&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;brew install fleetctl&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然後要設定兩個環境變數:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;em&gt;export FLEETCTL_TUNNEL=xxx.xxx.xxx.xxx&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;export FLEETCTL_SSH_USERNAME=admin&lt;/em&gt; (你設定的admin user名字)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;接下來用:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;fleetctl list-machines&lt;/em&gt; &amp;ndash;full&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;會得到像這樣的結果:&lt;/p&gt;

&lt;pre&gt;
MACHINE     IP      METADATA
291c678da14841a7bec4c9aa0dfe168c    10.0.0.6    -
8e63696268c54a62a3f21043669997c6    10.0.0.4    -
fbc2675e0aa940e1b11eb6640b62906f    10.0.0.5    -
&lt;/pre&gt;

&lt;p&gt;這表示這三台vm已經都跑起來了, 如果我們要ssh連上第一台可以用這種方式:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;fleetctl ssh 291c678da14841a7bec4c9aa0dfe168c&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;完全不用知道這台機器的public IP&lt;/p&gt;

&lt;p&gt;有了這三台VM, 接下來要做的事就是要deploy Mongodb的replica set了&lt;/p&gt;

&lt;p&gt;這邊我找到兩個參考:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://github.com/19hz/coreos-mongodb-cluster&quot;&gt;19hz/coreos-mongodb-cluster&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/auth0/coreos-mongodb&quot;&gt;auth0/coreos-mongodb&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;第一個其實是參考第二個寫出來的, 這兩個的差異在於第一個使用了data volume container&lt;/p&gt;

&lt;p&gt;Data volume container的優缺點及使用方法可以參考這篇: &lt;a href=&quot;https://docs.docker.com/engine/userguide/containers/dockervolumes/&quot;&gt;Manage data in containers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;本來我想直接採用第一個的, 不過弄了半天, 每次都是在加好admin user後restart mongo時就失敗了, 加上他的方法其實沒辦法保證db container剛好跟data volume container一定在同一台機器(可以參考&lt;a href=&quot;https://github.com/19hz/coreos-mongodb-cluster/issues/2&quot;&gt;這一個issue&lt;/a&gt;), 後來就有點懶得看, 所以改採用第二個方法&lt;/p&gt;

&lt;p&gt;第二個方法還蠻簡單的:&lt;/p&gt;

&lt;ul&gt;&lt;li&gt;先ssh到任一台(可以用fleetctl ssh),用etcdctl設定這個變數: &lt;em&gt;etcdctl set /mongo/replica/name myreplica&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;執行 &lt;em&gt;fleetctl start mongo@{1..3}.service&lt;/em&gt; 以及 &lt;em&gt;fleetctl start  mongo-replica-config.service&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;在第一個node跑起來後, 它會建立admin user自動產生它的密碼, 建立replica key, 然後再重啟mongodb, 相關參數像是admin user的密碼就會存在etcd, 會需要花一點時間&lt;/p&gt;

&lt;p&gt;用 &lt;code&gt;fleetctl list-units&lt;/code&gt; 就可以看各個的執行結果了, 像這樣&lt;/p&gt;

&lt;pre&gt;
UNIT                MACHINE         ACTIVE      SUB
mongo-replica-config.service    8e636962.../10.0.0.4    inactive    dead
mongo@1.service         8e636962.../10.0.0.4    active      running
mongo@2.service         291c678d.../10.0.0.6    active      running
mongo@3.service         fbc2675e.../10.0.0.5    active      running
&lt;/pre&gt;

&lt;p&gt;mongo-replica-config由於只會跑一次, 所以你會看到他最後的狀態是dead&lt;/p&gt;

&lt;p&gt;這裡建立出來的admin使用者為 &lt;em&gt;siteRootAdmin&lt;/em&gt; , 密碼則可以連上任一台, 用etcdctl取得:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;etcdctl get /mongo/replica/siteRootAdmin/pwd&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;有了這個後就可以遠端用mongodb cli或是相關的工具連上這台mongodb了&lt;/p&gt;

&lt;p&gt;心得: fleet在這邊的作用感覺並不是很大, 同樣的東西應該也可以用chef或ansible來佈署, 這邊沒太多異質性的服務需要部屬(也只有一個服務), 而且我常會有連不上的狀況, 不過它算是蠻簡單的, 下次應該來試試kubernetes或是docker swarm&lt;/p&gt;</content><summary>把我過年假期試的先來紀錄一下，這篇基本上有兩個部分:</summary></entry><entry><title>[iOS生手筆記] Swift練習曲之2 - SwSelect (快速生產抓圖神器)</title><link href="http://blog.jln.co/ios%E7%94%9F%E6%89%8B%E7%AD%86%E8%A8%98-swift%E7%B7%B4%E7%BF%92%E6%9B%B2%E4%B9%8B2-swselect-%E5%BF%AB%E9%80%9F%E7%94%9F%E7%94%A2%E6%8A%93%E5%9C%96%E7%A5%9E%E5%99%A8/" rel="alternate" type="text/html" title="[iOS生手筆記] Swift練習曲之2 - SwSelect (快速生產抓圖神器)" /><published>2015-10-05T23:37:39+08:00</published><updated>2015-10-05T23:37:39+08:00</updated><id>http://blog.jln.co/ios生手筆記-swift練習曲之2-swselect-快速生產抓圖神器</id><content type="html" xml:base="http://blog.jln.co/ios%E7%94%9F%E6%89%8B%E7%AD%86%E8%A8%98-swift%E7%B7%B4%E7%BF%92%E6%9B%B2%E4%B9%8B2-swselect-%E5%BF%AB%E9%80%9F%E7%94%9F%E7%94%A2%E6%8A%93%E5%9C%96%E7%A5%9E%E5%99%A8/">&lt;p&gt;既然講到抓圖神器, 就先幫友人Wisely宣傳一下: &lt;a href=&quot;https://play.google.com/store/apps/details?id=com.wisely.imagedownloader&quot;&gt;https://play.google.com/store/apps/details?id=com.wisely.imagedownloader&lt;/a&gt;&lt;/p&gt;&lt;p&gt;不過在這並不是要宣傳抓圖神器的, 之前在找題目練習Swift時, 就想到要寫一個解析HTML的工具, 然後可以像是&lt;a href=&quot;http://jsoup.org/&quot;&gt;jsoup&lt;/a&gt;, 或是&lt;a href=&quot;https://github.com/PuerkitoBio/goquery&quot;&gt;goquery&lt;/a&gt;一樣方便, 至少用來解析網頁內的連結或圖片連結方便的, 比如說像是下面的code:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;let $ = SwSelect(html)&lt;br/&gt;let imgUrls = $(”img”).attrs(”src”)&lt;br/&gt;for url in imgUrls {&lt;br/&gt;    print(url)&lt;br/&gt;}&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;這個例子就這幾行就可以把網頁裡面圖片的Url給抓出來了, 又或, 如果我們只想抓某特定class的tag內包含的圖片(如：”&amp;lt;div class=“a1“&amp;gt;&amp;lt;img src=“aa.jpg”/&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=“a2″&amp;gt;&amp;lt;img src=“a2.jpg”/&amp;gt;&amp;lt;/div&amp;gt;” 我們只想要包含在a1裡面卻不想要a2裡面的就可以用:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;let $ = SwSelect(html)&lt;br/&gt;let imgUrls = $(”.a1″).find(”img”).attrs(”src”)&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;本來我是想學&lt;a href=&quot;https://github.com/PuerkitoBio/goquery&quot;&gt;goquery&lt;/a&gt;一樣, 複刻出一套&lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;出來的, 順便複習一下&lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;, 上面的範例其實也像是&lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;的API(不得不說這API還有selector設計真的是神來一筆), 因此選擇要把&lt;a href=&quot;https://github.com/PuerkitoBio/goquery&quot;&gt;goquery&lt;/a&gt;從golang po到swift來, 其實是蠻可行的, 因為這兩個語言相似度還蠻高的, 但做到一半發現, 要複製整個&lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;其實蠻龐大的, 而且我只需要解析HTML的部分並不需要修改HTML的部分, 因此中途急轉彎, 把寫到一半的code, 重新包裝成這個&lt;a href=&quot;https://github.com/julianshen/SwSelect&quot;&gt;SwSelect&lt;/a&gt;, 剛好也足夠達到上面兩個例子想要的啦&lt;/p&gt;&lt;p&gt;由於原本就是想從goquery po過來,  因此包裝了libxml2, 也把goquery用的selector parser的核心 - &lt;a href=&quot;https://github.com/andybalholm/cascadia&quot;&gt;Cascadia&lt;/a&gt;給移植到Swift來, 整個&lt;a href=&quot;https://github.com/julianshen/SwSelect&quot;&gt;SwSelect&lt;/a&gt;可以說是基於&lt;a href=&quot;https://github.com/andybalholm/cascadia&quot;&gt;Cascadia&lt;/a&gt;, 這次也順便練習了Swift 2的一些新特色, 不過在整合libxml2上面也吃了些苦頭, 這以後有機會再寫, 目前其實應該可以使用了, 說明還沒補, Cathage的支援也還沒試過, 不過一些用法可以看一下Unit test來當範例:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/julianshen/SwSelect/blob/master/SwSelectTests/SwSelectTests.swift&quot;&gt;https://github.com/julianshen/SwSelect/blob/master/SwSelectTests/SwSelectTests.swift&lt;/a&gt;&lt;/p&gt;&lt;p&gt;這週應該會找時間補上說明&lt;/p&gt;&lt;p&gt;如果有需要的話歡迎拿去使用:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/julianshen/SwSelect&quot;&gt;https://github.com/julianshen/SwSelect&lt;/a&gt;&lt;br/&gt;&lt;/p&gt;</content><category term="iOS Development" /><category term="Swift" /><summary>既然講到抓圖神器, 就先幫友人Wisely宣傳一下: https://play.google.com/store/apps/details?id=com.wisely.imagedownloader不過在這並不是要宣傳抓圖神器的, 之前在找題目練習Swift時, 就想到要寫一個解析HTML的工具, 然後可以像是jsoup, 或是goquery一樣方便, 至少用來解析網頁內的連結或圖片連結方便的, 比如說像是下面的code:let $ = SwSelect(html)let imgUrls = $(”img”).attrs(”src”)for url in imgUrls {    print(url)}這個例子就這幾行就可以把網頁裡面圖片的Url給抓出來了, 又或, 如果我們只想抓某特定class的tag內包含的圖片(如：”&amp;lt;div class=“a1“&amp;gt;&amp;lt;img src=“aa.jpg”/&amp;gt;&amp;lt;/div&amp;gt;&amp;lt;div class=“a2″&amp;gt;&amp;lt;img src=“a2.jpg”/&amp;gt;&amp;lt;/div&amp;gt;” 我們只想要包含在a1裡面卻不想要a2裡面的就可以用:let $ = SwSelect(html)let imgUrls = $(”.a1″).find(”img”).attrs(”src”)本來我是想學goquery一樣, 複刻出一套jQuery出來的, 順便複習一下jQuery, 上面的範例其實也像是jQuery的API(不得不說這API還有selector設計真的是神來一筆), 因此選擇要把goquery從golang po到swift來, 其實是蠻可行的, 因為這兩個語言相似度還蠻高的, 但做到一半發現, 要複製整個jQuery其實蠻龐大的, 而且我只需要解析HTML的部分並不需要修改HTML的部分, 因此中途急轉彎, 把寫到一半的code, 重新包裝成這個SwSelect, 剛好也足夠達到上面兩個例子想要的啦由於原本就是想從goquery po過來,  因此包裝了libxml2, 也把goquery用的selector parser的核心 - Cascadia給移植到Swift來, 整個SwSelect可以說是基於Cascadia, 這次也順便練習了Swift 2的一些新特色, 不過在整合libxml2上面也吃了些苦頭, 這以後有機會再寫, 目前其實應該可以使用了, 說明還沒補, Cathage的支援也還沒試過, 不過一些用法可以看一下Unit test來當範例:https://github.com/julianshen/SwSelect/blob/master/SwSelectTests/SwSelectTests.swift這週應該會找時間補上說明如果有需要的話歡迎拿去使用:https://github.com/julianshen/SwSelect</summary></entry><entry><title>[iOS生手筆記] Extending Arrays</title><link href="http://blog.jln.co/ios%E7%94%9F%E6%89%8B%E7%AD%86%E8%A8%98-extending-arrays/" rel="alternate" type="text/html" title="[iOS生手筆記] Extending Arrays" /><published>2015-10-04T23:47:48+08:00</published><updated>2015-10-04T23:47:48+08:00</updated><id>http://blog.jln.co/ios生手筆記-extending-arrays</id><content type="html" xml:base="http://blog.jln.co/ios%E7%94%9F%E6%89%8B%E7%AD%86%E8%A8%98-extending-arrays/">&lt;p&gt;在Swift裡, Protocol和Protocol extension是非常強悍的東西, 比起OO世界的Class, 其實是更加犀利, 在今年(2015)的WWDC有一場個人很推薦的&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015-408/&quot;&gt;&lt;i&gt;Protocol-Oriented Programming in Swift&lt;/i&gt;&lt;/a&gt; &lt;i&gt;, &lt;/i&gt;這場講的蠻精闢的, 熱門到後來加開了第二場, 今年我去WWDC, 我自己就兩場都去了, 回來又再回為了一次, 相當建議聽看看的:&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2015-408/&quot;&gt;https://developer.apple.com/videos/play/wwdc2015-408/&lt;/a&gt;&lt;/p&gt;&lt;p&gt;好, 這篇重點不是推薦這場演講&amp;hellip;.而是怎在Swift中去建立Array extension? 這好像沒什麼難的, 不就像下面這樣就可以了?&lt;br/&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;extension Array {&lt;br/&gt;    func concat() -&amp;gt; String {&lt;br/&gt;        var str = &amp;ldquo;&amp;rdquo;&lt;br/&gt;        for i in self {&lt;br/&gt;            str += String(i)&lt;br/&gt;        }&lt;br/&gt;        return str&lt;br/&gt;    }&lt;br/&gt;}&lt;/i&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;沒錯, 這是最簡單的方式, 但其實有個問題, Array內的元件(element)是泛型, 也就可能是任意的型態, 以這個例子來說, 也有可能是無法轉成String的型態, 在這邊就有可能出問題, 因為這寫法會被套用到所有的Array型態去, 不管是String array, In array或其他, 但大部分現實的例子(也就是我手上在寫的東西剛好碰到的例子), 我們只希望延伸出的東西只被套用到某些特定的型態, 這時候就得加上”where”來解決這問題:&lt;/p&gt;&lt;p&gt;&lt;script src=&quot;https://gist.github.com/julianshen/bf4895ab31f4fbda09c4.js&quot;&gt;&lt;/script&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;以上面這例子, 雖然字串陣列跟整數陣列都有find這函式, 參數型態也一樣(Self.Generator.Element), 但這兩者的find的行為是不同的, 以字串陣列來說是找含有這一字串的, 而以整數陣列來說則是找一樣的, 這邊就是靠extension裡的where&lt;/p&gt;&lt;p&gt;這邊有個不一樣的地方是, Array被換成CollectionType了, 這是因為where裡面要判斷Element是不是我們所要的型態, 而Array是一個struct, CollectionType才是一個Protocol, 所以這邊我們用CollectionType來達到這目的&lt;br/&gt;&lt;/p&gt;</content><category term="swift" /><category term="iOS Development" /><summary>在Swift裡, Protocol和Protocol extension是非常強悍的東西, 比起OO世界的Class, 其實是更加犀利, 在今年(2015)的WWDC有一場個人很推薦的Protocol-Oriented Programming in Swift , 這場講的蠻精闢的, 熱門到後來加開了第二場, 今年我去WWDC, 我自己就兩場都去了, 回來又再回為了一次, 相當建議聽看看的:https://developer.apple.com/videos/play/wwdc2015-408/好, 這篇重點不是推薦這場演講&amp;hellip;.而是怎在Swift中去建立Array extension? 這好像沒什麼難的, 不就像下面這樣就可以了?extension Array {    func concat() -&amp;gt; String {        var str = &amp;ldquo;&amp;rdquo;        for i in self {            str += String(i)        }        return str    }}沒錯, 這是最簡單的方式, 但其實有個問題, Array內的元件(element)是泛型, 也就可能是任意的型態, 以這個例子來說, 也有可能是無法轉成String的型態, 在這邊就有可能出問題, 因為這寫法會被套用到所有的Array型態去, 不管是String array, In array或其他, 但大部分現實的例子(也就是我手上在寫的東西剛好碰到的例子), 我們只希望延伸出的東西只被套用到某些特定的型態, 這時候就得加上”where”來解決這問題:以上面這例子, 雖然字串陣列跟整數陣列都有find這函式, 參數型態也一樣(Self.Generator.Element), 但這兩者的find的行為是不同的, 以字串陣列來說是找含有這一字串的, 而以整數陣列來說則是找一樣的, 這邊就是靠extension裡的where這邊有個不一樣的地方是, Array被換成CollectionType了, 這是因為where裡面要判斷Element是不是我們所要的型態, 而Array是一個struct, CollectionType才是一個Protocol, 所以這邊我們用CollectionType來達到這目的</summary></entry><entry><title>[iOS生手筆記] Swift裡的“\r”與”\r ”</title><link href="http://blog.jln.co/ios%E7%94%9F%E6%89%8B%E7%AD%86%E8%A8%98-swift%E8%A3%A1%E7%9A%84r%E8%88%87rn/" rel="alternate" type="text/html" title="[iOS生手筆記] Swift裡的“\r”與”\r\n”" /><published>2015-09-28T01:33:13+08:00</published><updated>2015-09-28T01:33:13+08:00</updated><id>http://blog.jln.co/ios生手筆記-swift裡的r與rn</id><content type="html" xml:base="http://blog.jln.co/ios%E7%94%9F%E6%89%8B%E7%AD%86%E8%A8%98-swift%E8%A3%A1%E7%9A%84r%E8%88%87rn/">&lt;p&gt;實在有點詭異的問題, 解決後又覺得實在有點蠢, 結果這問題足足花了我一個半小時才得到答案&lt;/p&gt;&lt;p&gt;問題是這樣的, 我拿了這一個字串 &lt;i&gt;&lt;b&gt;&amp;ldquo;&amp;lsquo;x\\r\nx&amp;rsquo;&amp;rdquo;&lt;/b&gt;&lt;/i&gt; 來做解析, 一個個Character去檢查是不是”\r”, 如:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;i&gt;let x=&amp;ldquo;&#39;x\\r\nx&amp;rsquo;&amp;rdquo;&lt;br/&gt;for s in x.characters {&lt;br/&gt;    if s == “\r” {&lt;br/&gt;         print(”got you!”)&lt;br/&gt;    }&lt;br/&gt;}&lt;/i&gt;&lt;br/&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;邏輯上看起來沒啥問題, 但執行結果一直不如預期(沒印出”got you”), 把第四個字元substring出來它也不等於字串”\r”&lt;/p&gt;&lt;p&gt;百思不得其解, 結果最後在\r\n中間加一個空白後, 就得到預期的結果了, 原來&amp;hellip;.它是把”\r\n”整個當成一個字元!!!&lt;/p&gt;</content><category term="iOS Development" /><category term="Swift" /><summary>實在有點詭異的問題, 解決後又覺得實在有點蠢, 結果這問題足足花了我一個半小時才得到答案問題是這樣的, 我拿了這一個字串 &amp;ldquo;&amp;lsquo;x\\r x&amp;rsquo;&amp;rdquo; 來做解析, 一個個Character去檢查是不是”\r”, 如:let x=&amp;ldquo;&#39;x\\r x&amp;rsquo;&amp;rdquo;for s in x.characters {    if s == “\r” {         print(”got you!”)    }}邏輯上看起來沒啥問題, 但執行結果一直不如預期(沒印出”got you”), 把第四個字元substring出來它也不等於字串”\r”百思不得其解, 結果最後在\r 中間加一個空白後, 就得到預期的結果了, 原來&amp;hellip;.它是把”\r ”整個當成一個字元!!!</summary></entry><entry><title>[開箱文] Sentri初體驗</title><link href="http://blog.jln.co/%E9%96%8B%E7%AE%B1%E6%96%87-sentri%E5%88%9D%E9%AB%94%E9%A9%97/" rel="alternate" type="text/html" title="[開箱文] Sentri初體驗" /><published>2015-09-26T03:30:05+08:00</published><updated>2015-09-26T03:30:05+08:00</updated><id>http://blog.jln.co/開箱文-sentri初體驗</id><content type="html" xml:base="http://blog.jln.co/%E9%96%8B%E7%AE%B1%E6%96%87-sentri%E5%88%9D%E9%AB%94%E9%A9%97/">&lt;figure data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; src=&quot;http://66.media.tumblr.com/2d31d9c77645bf21f41ff9a13343f256/tumblr_inline_nv8y6kTYwi1qzg4zq_540.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Sentri這個產品之前在Kick starter上的熱門程度, 可說是台灣之光呀, 加上它又是有幾個優秀的前同事的加持, 因此一開始我就在Kick starter上下訂了, 直到昨天終於收到他了, 本來想說晚點再來寫這篇的, 不過現在也沒啥睡意, 就先來寫寫&lt;/p&gt;&lt;p&gt;可能是剛開始的第一個產品, 其實還有些未盡完善的地方吧, 也有可能有些我體驗還沒很充足, 這篇參考參考就好, 不用太認真 :P&lt;/p&gt;&lt;p&gt;&lt;b&gt;開箱&lt;/b&gt;&lt;/p&gt;&lt;figure data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; src=&quot;http://67.media.tumblr.com/55f694986540162c317f19b494b3ad35/tumblr_inline_nv8xniKapb1qzg4zq_540.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; src=&quot;http://66.media.tumblr.com/1d0b23d6ad10a93ffdf361bc8c88c370/tumblr_inline_nv8xo2ZYbb1qzg4zq_540.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-orig-width=&quot;2448&quot; data-orig-height=&quot;3264&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;2448&quot; data-orig-height=&quot;3264&quot; src=&quot;http://66.media.tumblr.com/edfbe8e079f5a21aba71a5fc3b2f9a55/tumblr_inline_nv8xqw4lyr1qzg4zq_540.jpg&quot;/&gt;&lt;/figure&gt;&lt;figure data-orig-width=&quot;2448&quot; data-orig-height=&quot;3264&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;2448&quot; data-orig-height=&quot;3264&quot; src=&quot;http://66.media.tumblr.com/f3b32ddf3e6ac1aa960b4be8714518bf/tumblr_inline_nv8xre0LpD1qzg4zq_540.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;包裝外觀還蠻用心的, 不像一般台灣3C產品的草率, 裡面也用了不少泡綿做保護, 背面則是寫滿了一堆功能性的解說, 不過這部份我比較不喜歡, 密密麻麻的字, 其實不太會想去看, 或許有一些生動的圖示, 減少一半的文字會更好一點&lt;/p&gt;&lt;p&gt;一打開後, 它就方方正正的(啊本來就方的)躺在中間, 配件(不多)則是在下面, 下面還有很多多餘空間, 這樣剛剛好, 也不算浪費空間, 翻到背面, 有兩個孔是可以釘牆上的, 還有一個kickstand是可以讓你立在桌上, 前者的設計其實有點怪異, 因為它必須是要接著電源的, 一般牆上掛鐘的位子比較少有插座&lt;/p&gt;&lt;p&gt;隱藏在腳座後面的則有USB, 網路孔, 電源開關, 跟Reset, 電源開關的設計, 是”一根”, 形狀我是覺得怪怪的, 怎不是圓圓的按鈕, 或許我比較習慣那樣 XD 不過, reset那個孔, 也太小了吧, 穿針線的針不知道會不會也太粗&lt;/p&gt;&lt;p&gt;&lt;b&gt;軟體&lt;/b&gt;&lt;/p&gt;&lt;figure data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; src=&quot;http://67.media.tumblr.com/2de21d76f9b97e819e13dd7ac6c499d9/tumblr_inline_nv8y8kHGaG1qzg4zq_540.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;一開機之後, 自然是要做設定, “Welcome Home”這段字, 看起來是特別溫馨 :D&lt;/p&gt;&lt;p&gt;而緊接著, 就是要設定網路跟註冊帳號, 這邊我碰到一個小小的bug, 起先我是接著Ethernet, 但忘了把另一頭接到Hub上, 然後又因為它還是提示我設定Wifi, 我就也設定了, 結果在註冊階段, 它一直說我沒連上Internet, 最後才發現網路線的狀況, 此時我並不是接上另一頭而是把它拔掉, 拔掉之後就可以連上了, 看起來它默認先走有線的, 但卻不會因為有線的連不上切換成Wifi&lt;/p&gt;&lt;p&gt;初始設定都是利用觸控螢幕操作, 輸入文字時我是覺得有點彆扭, 我是覺得, 如果家裡有Wifi, 手機又是連上同一個網路, 或許可以讓使用者在手機登入後就可以同步完設定了&lt;br/&gt;&lt;/p&gt;&lt;figure data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;3264&quot; data-orig-height=&quot;2448&quot; src=&quot;http://66.media.tumblr.com/ffd527ebcad717229899d1e5679b0449/tumblr_inline_nv8yigc6ww1qzg4zq_540.jpg&quot;/&gt;&lt;/figure&gt;&lt;p&gt;首頁的操作介面很簡單&lt;/p&gt;&lt;p&gt;首先映入眼簾的當然就是時鐘跟幾個資訊, 向左滑是設定, 向右則是Alerts&lt;/p&gt;&lt;p&gt;攝影機是用來監控的, 也有動態偵測, 所以一開始就可以在Alerts看到我被偷拍到的照片(小偷是我?!), 比較像是一個有螢幕的Dropcam&lt;/p&gt;&lt;p&gt;設定上可以設Away Mode (開啟Alerts) 和 Home mode (關閉Alerts), 以及可以設定桌面主題, 美中不足的是不可以用自己照片(也沒辦法用camera拍), 手機上的app也沒辦法用自己的圖設定這塊&lt;/p&gt;&lt;p&gt;相機則可設定夜視模式, 除了開關還有自動, 但自動好像沒啥用處, 我把房間燈關了, 用手機遠端看, 還是一片黑暗, 但我設定成打開就可以:&lt;/p&gt;&lt;p&gt;夜視效果不錯&lt;br/&gt;&lt;/p&gt;&lt;figure data-orig-width=&quot;1242&quot; data-orig-height=&quot;2208&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;1242&quot; data-orig-height=&quot;2208&quot; src=&quot;http://65.media.tumblr.com/6dccf73c889bec15d6cd72856598c22e/tumblr_inline_nv8z392BxU1qzg4zq_540.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;效能上, 有點失望, 隨便點功能都要等待1~2秒以上, 會以為沒反應, 然後它就又突然出來了, 可能硬體不夠好或是效能還沒調整好, 如以下影片:&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://goo.gl/photos/SUog336k8cNyXZ5E6&quot;&gt;https://goo.gl/photos/SUog336k8cNyXZ5E6&lt;/a&gt;&lt;/p&gt;&lt;p&gt;另外一個小缺點是沒有夜晚模式, 我把燈關了後它還是很亮, 它不適合擺臥房呀!&lt;a href=&quot;https://goo.gl/photos/SUog336k8cNyXZ5E6&quot;&gt;&lt;br/&gt;&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;手機App&lt;/b&gt;&lt;/p&gt;&lt;p&gt;我目前只測了iPhone, 但這App的介面實在不像iPhone介面, 也還有點陽春, 目前還沒試太多, 但碰到幾個待改進的跟BUG&lt;/p&gt;&lt;p&gt;手機上的設定似乎跟Sentri不是同步的, 比如說, 我已經在Sentri上設定我是用攝氏為單位, 但手機登入後, 還是華氏&lt;/p&gt;&lt;figure data-orig-width=&quot;1242&quot; data-orig-height=&quot;2208&quot; class=&quot;tmblr-full&quot;&gt;&lt;img data-orig-width=&quot;1242&quot; data-orig-height=&quot;2208&quot; src=&quot;http://66.media.tumblr.com/54ab9451b5323683caf1cd4d3f972c8b/tumblr_inline_nv8za0z37P1qzg4zq_540.png&quot;/&gt;&lt;/figure&gt;&lt;p&gt;Alerts影片播放有會變成上圖那樣&lt;/p&gt;&lt;p&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;&lt;b&gt;小結&lt;/b&gt;&lt;br/&gt;&lt;/p&gt;&lt;p&gt;初感覺就比較像是有螢幕的Dropcam, 目前可顯示的資訊還不太多, 我也沒啥裝置可以跟他互動, 如果可以把它當一個比較大的Android Wear或許也會不錯, 不過目前對它還沒太多想法, 可能需要再多體驗一陣子&lt;br/&gt;&lt;/p&gt;</content><category term="開箱文" /><summary>Sentri這個產品之前在Kick starter上的熱門程度, 可說是台灣之光呀, 加上它又是有幾個優秀的前同事的加持, 因此一開始我就在Kick starter上下訂了, 直到昨天終於收到他了, 本來想說晚點再來寫這篇的, 不過現在也沒啥睡意, 就先來寫寫可能是剛開始的第一個產品, 其實還有些未盡完善的地方吧, 也有可能有些我體驗還沒很充足, 這篇參考參考就好, 不用太認真 :P開箱包裝外觀還蠻用心的, 不像一般台灣3C產品的草率, 裡面也用了不少泡綿做保護, 背面則是寫滿了一堆功能性的解說, 不過這部份我比較不喜歡, 密密麻麻的字, 其實不太會想去看, 或許有一些生動的圖示, 減少一半的文字會更好一點一打開後, 它就方方正正的(啊本來就方的)躺在中間, 配件(不多)則是在下面, 下面還有很多多餘空間, 這樣剛剛好, 也不算浪費空間, 翻到背面, 有兩個孔是可以釘牆上的, 還有一個kickstand是可以讓你立在桌上, 前者的設計其實有點怪異, 因為它必須是要接著電源的, 一般牆上掛鐘的位子比較少有插座隱藏在腳座後面的則有USB, 網路孔, 電源開關, 跟Reset, 電源開關的設計, 是”一根”, 形狀我是覺得怪怪的, 怎不是圓圓的按鈕, 或許我比較習慣那樣 XD 不過, reset那個孔, 也太小了吧, 穿針線的針不知道會不會也太粗軟體一開機之後, 自然是要做設定, “Welcome Home”這段字, 看起來是特別溫馨 :D而緊接著, 就是要設定網路跟註冊帳號, 這邊我碰到一個小小的bug, 起先我是接著Ethernet, 但忘了把另一頭接到Hub上, 然後又因為它還是提示我設定Wifi, 我就也設定了, 結果在註冊階段, 它一直說我沒連上Internet, 最後才發現網路線的狀況, 此時我並不是接上另一頭而是把它拔掉, 拔掉之後就可以連上了, 看起來它默認先走有線的, 但卻不會因為有線的連不上切換成Wifi初始設定都是利用觸控螢幕操作, 輸入文字時我是覺得有點彆扭, 我是覺得, 如果家裡有Wifi, 手機又是連上同一個網路, 或許可以讓使用者在手機登入後就可以同步完設定了首頁的操作介面很簡單首先映入眼簾的當然就是時鐘跟幾個資訊, 向左滑是設定, 向右則是Alerts攝影機是用來監控的, 也有動態偵測, 所以一開始就可以在Alerts看到我被偷拍到的照片(小偷是我?!), 比較像是一個有螢幕的Dropcam設定上可以設Away Mode (開啟Alerts) 和 Home mode (關閉Alerts), 以及可以設定桌面主題, 美中不足的是不可以用自己照片(也沒辦法用camera拍), 手機上的app也沒辦法用自己的圖設定這塊相機則可設定夜視模式, 除了開關還有自動, 但自動好像沒啥用處, 我把房間燈關了, 用手機遠端看, 還是一片黑暗, 但我設定成打開就可以:夜視效果不錯效能上, 有點失望, 隨便點功能都要等待1~2秒以上, 會以為沒反應, 然後它就又突然出來了, 可能硬體不夠好或是效能還沒調整好, 如以下影片:https://goo.gl/photos/SUog336k8cNyXZ5E6另外一個小缺點是沒有夜晚模式, 我把燈關了後它還是很亮, 它不適合擺臥房呀!手機App我目前只測了iPhone, 但這App的介面實在不像iPhone介面, 也還有點陽春, 目前還沒試太多, 但碰到幾個待改進的跟BUG手機上的設定似乎跟Sentri不是同步的, 比如說, 我已經在Sentri上設定我是用攝氏為單位, 但手機登入後, 還是華氏Alerts影片播放有會變成上圖那樣小結初感覺就比較像是有螢幕的Dropcam, 目前可顯示的資訊還不太多, 我也沒啥裝置可以跟他互動, 如果可以把它當一個比較大的Android Wear或許也會不錯, 不過目前對它還沒太多想法, 可能需要再多體驗一陣子</summary></entry></feed>
