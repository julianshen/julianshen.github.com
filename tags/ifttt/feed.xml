<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IFTTT on Le murmure de Julian</title><link>https://blog.jln.co/tags/ifttt/</link><description>Recent content in IFTTT on Le murmure de Julian</description><generator>Hugo</generator><language>zh-tw</language><managingEditor>julianshen22@gmail.com (Julian Shen)</managingEditor><webMaster>julianshen22@gmail.com (Julian Shen)</webMaster><lastBuildDate>Sat, 04 Feb 2017 16:17:19 +0000</lastBuildDate><atom:link href="https://blog.jln.co/tags/ifttt/feed.xml" rel="self" type="application/rss+xml"/><item><title>用ifttt + heroku跑定時的tasks</title><link>https://blog.jln.co/%E7%94%A8ifttt--heroku%E8%B7%91%E5%AE%9A%E6%99%82%E7%9A%84tasks/</link><pubDate>Sat, 04 Feb 2017 16:17:19 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%94%A8ifttt--heroku%E8%B7%91%E5%AE%9A%E6%99%82%E7%9A%84tasks/</guid><description>&lt;p&gt;這篇是延續&amp;quot;&lt;a href="http://blog.jln.co/%E4%BD%BF%E7%94%A8aws-lambda%E5%92%8Cgithub%E4%BE%86%E6%8F%90%E4%BE%9B%E4%B8%AD%E8%8F%AF%E8%81%B7%E6%A3%92%E8%B3%BD%E7%A8%8B%E8%B3%87%E6%96%99/"&gt;使用AWS lambda和Github來提供中華職棒賽程資料&lt;/a&gt;&amp;quot;,
之前的做法是用Cloud watch加上lambda來做這件事, 但我跑的東西並不是那麼的頻繁, 在AWS上還是會被收到流量的費用,
因此就打算用更經濟的方式, 利用heroku免費的額度來做這事(真是壞客戶 XD)&lt;/p&gt;</description></item><item><title>[筆記] Google Drive API兩三事: App data, 靜態網頁連結</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98-Google-Drive-API%E5%85%A9%E4%B8%89%E4%BA%8B-App-data-%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81%E9%80%A3%E7%B5%90/</link><pubDate>Wed, 21 Aug 2013 22:16:26 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98-Google-Drive-API%E5%85%A9%E4%B8%89%E4%BA%8B-App-data-%E9%9D%9C%E6%85%8B%E7%B6%B2%E9%A0%81%E9%80%A3%E7%B5%90/</guid><description>&lt;p&gt;颱風天, 適合寫點東西, 所以就把上次的&lt;a href="http://bit.ly/18JQHas" target="_blank"&gt;PinterestRSSAggregator&lt;/a&gt;加上發佈到Google Drive功能, 第一次碰Google drive api, 不過還好Google已經有了一個node.js的module: &lt;a href="http://bit.ly/1d1GImW"&gt;http://bit.ly/1d1GImW&lt;/a&gt;,省去了重刻Google API的功(這module還頗有趣的, 利用了Google discovery API, 支援了相當多Google API, 但實際上各API的細節的實作卻不在這module之中), 不過一開始還是在Google drive上碰到了一些問題:&lt;br/&gt;&lt;/p&gt;</description></item><item><title>看著海寫程式會不會太宅點? - PinterestRSSAggregator</title><link>https://blog.jln.co/%E7%9C%8B%E8%91%97%E6%B5%B7%E5%AF%AB%E7%A8%8B%E5%BC%8F%E6%9C%83%E4%B8%8D%E6%9C%83%E5%A4%AA%E5%AE%85%E9%BB%9E-PinterestRSSAggregator/</link><pubDate>Thu, 15 Aug 2013 10:01:19 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%9C%8B%E8%91%97%E6%B5%B7%E5%AF%AB%E7%A8%8B%E5%BC%8F%E6%9C%83%E4%B8%8D%E6%9C%83%E5%A4%AA%E5%AE%85%E9%BB%9E-PinterestRSSAggregator/</guid><description>&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/16QMjak" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="225" src="http://bit.ly/1bxhUyX" width="400"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;陽光&amp;hellip;.跟沙灘呀&amp;hellip;&amp;hellip;真是好風景呀&amp;hellip;.躺著寫程式真不錯 (其實在顧包包)&lt;br/&gt;&lt;br/&gt;昨天上飛機前, 把這兩天晚上寫的東西, &lt;a href="http://bit.ly/16QMjam" target="_blank"&gt;PinterestRSSAggregator&lt;/a&gt;, 在上飛機之前放上了github&amp;hellip;.趁現在來補一些內容&lt;br/&gt;&lt;br/&gt;會寫這東西的緣起在於這篇: &lt;a href="http://bit.ly/1bxhUyZ"&gt;http://bit.ly/1bxhUyZ&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;Pinterest目前沒API, 這RSS也只能取得一個人最近的資訊, 但常常我們要看的不會是自己去pin的, 而是自己所follow的人pin的最新資訊, 所以這樣的RSS用處就嫌少了點, 所以想說如果可以把自己所follow的全部集結成一個rss應該會很不錯, 因此就寫了這些東西&lt;br/&gt;&lt;br/&gt;一開始碰到的問題點是, 沒API, 怎抓following的資訊? 從 &lt;a href="http://bit.ly/1bxhUz2,"&gt;http://bit.ly/1bxhUz2,&lt;/a&gt; 似乎每個被follow的人的link都有userWrapper這class, 這或許是個出發點, 所以第一個版本做了一個直接去抓網頁回來解析抓出含有這class的連結&amp;hellip;.但是&amp;hellip;失敗了&amp;hellip;因為抓回來的靜態網頁, 最多只有十二個人的連結, 超過就抓不到, 網頁上要滑鼠捲到最下面才會再load出其他的&lt;br/&gt;&lt;br/&gt;後來想到的方法就是利用CasperJS, 模擬捲頁捲到最後的行為, 再把所有followings都抓回來&amp;hellip;.喔耶&amp;hellip;.這招居然行的通&amp;hellip;.把所有rss 的url再用Google Feed API去抓內容(我懶得parse RSS了), 再用feed這module生成新的RSS&amp;hellip;.大功告成&amp;hellip;.接下來只要讓他固定一段時間跑一次, 就有一個土炮的Pinterest API用了&amp;hellip; (還真heavy的API :( )&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/16QMjqT"&gt;http://bit.ly/16QMjqT&lt;/a&gt;</description></item><item><title>[Android] Retrofit + Signpost : 替Retrofit加上OAuth支援</title><link>https://blog.jln.co/Android-Retrofit--Signpost-%E6%9B%BFRetrofit%E5%8A%A0%E4%B8%8AOAuth%E6%94%AF%E6%8F%B4/</link><pubDate>Sat, 29 Jun 2013 08:31:32 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-Retrofit--Signpost-%E6%9B%BFRetrofit%E5%8A%A0%E4%B8%8AOAuth%E6%94%AF%E6%8F%B4/</guid><description>看到Square發表的這個Retrofit - &lt;a href="http://bit.ly/167v72a"&gt;http://bit.ly/167v72a&lt;/a&gt; 蠻有趣的, 它的目的似乎是試圖的想要去簡化開發REST client, 開發者不用寫太多的邏輯, 只要寫一個Interface跟利用annotation就可以完成一個簡單的REST client:&lt;br/&gt;&lt;br/&gt;&lt;pre class="prettyprint prettyprinted" style="background-color: whitesmoke; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; border: 1px solid rgba(0, 0, 0, 0.14902); color: #666666; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; line-height: 20px; margin-bottom: 20px; padding: 9.5px; white-space: pre-wrap; word-break: break-all; word-wrap: break-word;"&gt;&lt;span class="kwd"&gt;public&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt; &lt;/span&gt;&lt;span class="kwd"&gt;interface&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt; &lt;/span&gt;&lt;span class="typ" style="color: #222222;"&gt;GitHubService&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt; &lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;{&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="lit"&gt;@GET&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;(&lt;/span&gt;&lt;span class="str" style="color: #32835b;"&gt;"/users/{user}/repos"&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;)&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="typ" style="color: #222222;"&gt;List&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;&amp;lt;&lt;/span&gt;&lt;span class="typ" style="color: #222222;"&gt;Repo&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;&amp;gt;&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt; listRepos&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;(&lt;/span&gt;&lt;span class="lit"&gt;@Path&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;(&lt;/span&gt;&lt;span class="str" style="color: #32835b;"&gt;"user"&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;)&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt; &lt;/span&gt;&lt;span class="typ" style="color: #222222;"&gt;String&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt; user&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;);&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;div&gt;&lt;span class="pun" style="color: #888888;"&gt;&lt;br/&gt;&lt;/span&gt;&lt;/div&gt;因為開發者只需要寫interface和annotation, 實質上並不用寫任何的code, 真正實作的部份他用了Proxy class的技巧包裝起來了, 這作法讓我想起來很久之前我在之前的工作幫公司寫的一個legacy系統的wrapper, 那時有很多機器產生的interface, 如果人工一個個實作很浪費時間, Proxy class可以解決掉這一部分的問題, 同樣的在retrofit似乎也是想用這技巧節省實作&lt;br/&gt;&lt;br/&gt;但可惜的是, 現在的retrofit並還沒加入OAuth的支援, 因此送出去的API部分並沒被oauth簽章過,不過所幸要解決這一部分也不難, 寫一個Client class搭配&lt;a href="http://bit.ly/11OBeF8" target="_blank"&gt;Signpost&lt;/a&gt;還是可以做到, 這邊範例繼承了OkClient(使用OkHttp) :&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/14BPkrJ"&gt;&lt;/script&gt;&lt;br/&gt;因為OkHttp也是一種HttpURLConnection, 因此Signpost搭配DefaultOAuthProvider和DefaultOAuthConsumer即可, 另外初始化RestAdapter時加上這個新的Client即可:&lt;br/&gt;&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;RestAdapter restAdapter = new RestAdapter.Builder() .setClient(new SignedOkClient(mConsumer)) &lt;/blockquote&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/11OBeFb"&gt;http://bit.ly/11OBeFb&lt;/a&gt;</description></item><item><title>[Android] 自定義View屬性</title><link>https://blog.jln.co/Android-%E8%87%AA%E5%AE%9A%E7%BE%A9View%E5%B1%AC%E6%80%A7/</link><pubDate>Thu, 27 Jun 2013 01:46:42 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-%E8%87%AA%E5%AE%9A%E7%BE%A9View%E5%B1%AC%E6%80%A7/</guid><description>&lt;p&gt;在&lt;a href="http://bit.ly/14xA3IP" target="_blank"&gt;前一篇寫了一個自訂義的layout - SimpleCellLayout&lt;/a&gt;, 前一個版本的問題就是, 必須是寫程式把child view加進這個layout之中, 而且針對像是欄與行的數目也必須在程式裡設定, 並無法寫到layout xml中, 所以這次的目邊就是要讓這個layout可以像下面這樣用layout xml來擺佈:&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/1af6Kkh"&gt;&lt;/script&gt;&lt;br/&gt;在這範例之中, 用到幾個像是col, row, gapsize, cellX這些在原生Android並不存在的屬性, 為了這些屬性, 就需要定義一個attrs.xml在res/values目錄內, attrs.xml 裡面要定義的就是這些樣式描述屬性, 這邊定義了: 給SimpleCellLayout本身用的col(欄數), row(行數), gapsize(間距大小), 以及給他的Child views用的cellX(格子的橫軸位置), cellY(格子的縱軸位置), colspan(格子寬), rowspan(格子高), 除了gapsize我們需要的跟實際螢幕上的大小有關, 所以格式定義為dimension外(就是可以用3dp, 1px這類的值), 其他都是整數就可&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/14xA5Ap"&gt;&lt;/script&gt; 這些屬性, 到時候就是要放在xml標籤內的屬性 &lt;br/&gt;&lt;br/&gt;要用到這些屬性, 需要先在tag裡面定義一個新的name space, 如同在前面範例寫的:&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Android] 一個簡單的自製 layout - SimpleCellLayout</title><link>https://blog.jln.co/Android-%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E8%87%AA%E8%A3%BD-layout-SimpleCellLayout/</link><pubDate>Wed, 26 Jun 2013 01:31:50 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84%E8%87%AA%E8%A3%BD-layout-SimpleCellLayout/</guid><description>&lt;p&gt;寫Android寫了這麼久, 才想到自己沒寫過custom layout, 剛剛花了點時間(主要時間還是花在跟Android studio和gradle搏鬥)寫了一個簡單的CellLayout (還很陽春) :&lt;br/&gt;&lt;br/&gt;&lt;a href="http://bit.ly/12nuhGn"&gt;http://bit.ly/12nuhGn&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;寫custom layout還蠻簡單的, 在onMeasure決定自己和child views的大小, 在onLayout時把每個child views放到適當的位置, 目前還沒加入attibrtues的支援, 所以暫時還只能寫code自己把view加進去, 另外也還沒加檢查是不是會有重疊的views, 之後再來寫&lt;br/&gt;&lt;br/&gt;這個layout跟GridView不同, 可以不用每個格子都是同一大小, 以下範例是把畫面劃成4x4的格子, 左上角的那張圖大小是2x2, 下方則是 4x2&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Android] 圓形大頭貼 - 使用Picasso的Transformation</title><link>https://blog.jln.co/Android-%E5%9C%93%E5%BD%A2%E5%A4%A7%E9%A0%AD%E8%B2%BC-%E4%BD%BF%E7%94%A8Picasso%E7%9A%84Transformation/</link><pubDate>Sat, 22 Jun 2013 01:31:57 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-%E5%9C%93%E5%BD%A2%E5%A4%A7%E9%A0%AD%E8%B2%BC-%E4%BD%BF%E7%94%A8Picasso%E7%9A%84Transformation/</guid><description>現在不管是Google+也好, 或是Facebook (Home), 似乎都很喜歡用圓形的大頭貼像這樣 (左上角圖形, &lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/10Ea6Kt" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="http://bit.ly/11DoFZH" width="225"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;但在server端存的大頭照其實都是都是方形的, 所以必須抓下來後再轉畫成圓的, 最近從網路抓圖的部分, 我還蠻喜歡用&lt;a href="http://bit.ly/10Ea9FT" target="_blank"&gt;Picasso&lt;/a&gt;的&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/11DoFZJ" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="191" src="http://bit.ly/11DoFZJ" width="400"/&gt;&lt;/a&gt;&lt;/div&gt;沒啥別的原因, 就是它簡單, 雖然說, 它似乎還是有一些小小問題, 不過它可以用這樣短短一行解決圖檔下載並顯示到ImageView的一連串動作:&lt;br/&gt;&lt;br/&gt;&lt;pre class="prettyprint prettyprinted" style="background-color: whitesmoke; border-bottom-left-radius: 4px; border-bottom-right-radius: 4px; border-top-left-radius: 4px; border-top-right-radius: 4px; border: 1px solid rgba(0, 0, 0, 0.14902); color: #666666; font-family: Monaco, Menlo, Consolas, 'Courier New', monospace; font-size: 13px; line-height: 20px; margin-bottom: 20px; padding: 9.5px; white-space: pre-wrap; word-break: break-all; word-wrap: break-word;"&gt;&lt;span style="background-color: #eeeeee;"&gt;&lt;span class="typ" style="color: #222222;"&gt;Picasso&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;.&lt;/span&gt;&lt;span class="kwd"&gt;with&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;(&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt;context&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;).&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt;load&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;(&lt;/span&gt;&lt;span class="str" style="color: #953a39;"&gt;"http://bit.ly/11DoFZL"&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;).&lt;/span&gt;&lt;span class="kwd"&gt;into&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;(&lt;/span&gt;&lt;span class="pln" style="color: black;"&gt;imageView&lt;/span&gt;&lt;span class="pun" style="color: #888888;"&gt;);&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;div&gt;&lt;br/&gt;不過, 簡單的代價可能在其他的地方來說彈性就不高了, 不過, 做這樣一個小玩意兒的彈性倒是還有, 在Picasso中, 可以實作Transformation把下載下來的圖檔再作一次後處理, 在它的網頁有一個CropSquareTransformation的範例, 圓形的大頭貼可以視為這一個的延伸:&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;script src="http://bit.ly/10Ea996"&gt;&lt;/script&gt;&lt;/div&gt;&lt;div&gt;這邊利用了BitmapShader重畫了一張圓形的大頭貼, 出來的結果就會像是這樣:&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/11DoFZP" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="400" src="http://bit.ly/10Ea998" width="225"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;/div&gt;&lt;div&gt;&lt;br/&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/11DoEVG"&gt;http://bit.ly/11DoEVG&lt;/a&gt;</description></item><item><title>[Android] 一閃一閃亮晶晶的BlinkLayout</title><link>https://blog.jln.co/Android-%E4%B8%80%E9%96%83%E4%B8%80%E9%96%83%E4%BA%AE%E6%99%B6%E6%99%B6%E7%9A%84BlinkLayout/</link><pubDate>Thu, 20 Jun 2013 20:16:26 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-%E4%B8%80%E9%96%83%E4%B8%80%E9%96%83%E4%BA%AE%E6%99%B6%E6%99%B6%E7%9A%84BlinkLayout/</guid><description>&lt;p&gt;在&lt;a href="https://developers.google.com/events/io/sessions/324958375" target="_blank"&gt;Androids Do Daydream&lt;/a&gt;裡有提到Romain Guy要他提(大概假的吧)在layout裡面放&amp;quot;&amp;lt;blink&amp;gt;&amp;ldquo;可以做到view閃爍的效果而不用寫到一行code&lt;br/&gt;&lt;br/&gt;查了一下AOSP的原始碼也的確有這東西, 它是一個躲在&lt;a href="https://github.com/android/platform_frameworks_base/blob/5cb0f2184656642160e9ac032d0646f766058a5b/core/java/android/view/LayoutInflater.java" target="_blank"&gt;LayoutInflater&lt;/a&gt;的一個叫BlinkLayout的東西, 這樣一來就可以配合&lt;a href="http://developer.android.com/reference/android/widget/TextClock.html" target="_blank"&gt;TextClock&lt;/a&gt; (API Level 17)來做一個閃爍的時鐘了&lt;br/&gt;&lt;br/&gt;&lt;script src="https://gist.github.com/julianshen/5822197.js"&gt;&lt;/script&gt;&lt;br/&gt;不過, 這樣, 是整個TextClock在閃, 而不是像一般數字鐘一樣是只有&amp;rdquo;:&amp;ldquo;閃, 如果要做到只有&amp;rdquo;:&amp;ldquo;在閃, 那只好把&amp;quot;時&amp;quot;跟&amp;quot;分&amp;quot;給拆開, 像這樣: &lt;br/&gt;&lt;br/&gt;&lt;script src="https://gist.github.com/julianshen/5822234.js"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://julianshen.blogspot.com/2013/06/android-blinklayout.html"&gt;http://julianshen.blogspot.com/2013/06/android-blinklayout.html&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[筆記][Android Studio]Git push</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98Android-StudioGit-push/</link><pubDate>Mon, 17 Jun 2013 09:46:39 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98Android-StudioGit-push/</guid><description>&lt;p&gt;本想說有直接整合了Git, GitHub是件不錯的事, 沒想到要把新project push到remote git就栽了&amp;hellip;.&lt;br/&gt;&lt;br/&gt;Android Studio/Intellij 似乎沒介面設定remote (搜尋了半天沒發現這種答案, 啃了半天的使用手冊也沒發現), 現在如果要把既有的project給匯出到遠端的git (如bitbucket), 就得利用command line (以bitbucket 為例):&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[筆記] Android Studio, Gradle &amp; Native libraries</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98-Android-Studio-Gradle-Native-libraries/</link><pubDate>Sun, 16 Jun 2013 00:01:29 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98-Android-Studio-Gradle-Native-libraries/</guid><description>&lt;p&gt;最近試用Android studio開發, 可能有些習慣被以往Eclipse慣壞了, 剛剛發現放在libs/底下的東西不像以前會被自動建置到apk內, 有點小訝異, 對jar file來說, 可能還好不算太難, 在build.gradle的dependencies內補上一筆就夠了, 但對native library (jni)那些.so檔, 就沒辦法&lt;br/&gt;&lt;br/&gt;用這樣解決了 Google了一下, 並且在Stack overflow上找到些解法來試, 可能因為Android studio跟Gradle Android plugin還一直在變化中, 在現在這版一直沒成功, 後來小改一下成底下這樣就成功了: &lt;br/&gt;&lt;script src="http://bit.ly/11PxIJZ"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;原本找到的解法是pkgTask.jniDir &lt;b&gt;&lt;span style="color: red;"&gt;new File&lt;/span&gt;&lt;/b&gt;(&amp;lsquo;build/native-libs&amp;rsquo;) , 這樣會得到&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Android] 列印到Android裝置</title><link>https://blog.jln.co/Android-%E5%88%97%E5%8D%B0%E5%88%B0Android%E8%A3%9D%E7%BD%AE/</link><pubDate>Tue, 02 Apr 2013 17:01:25 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-%E5%88%97%E5%8D%B0%E5%88%B0Android%E8%A3%9D%E7%BD%AE/</guid><description>&lt;p&gt;剛剛從Chrome要列印一份文件時, 發現一件有趣的事, 在選擇印表機時, 發現我的手機也在清單當中&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/17auoeu" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="156" src="http://bit.ly/Z5v1i8" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br/&gt;&lt;/div&gt;這怎一回事? 難道可以從電腦&amp;quot;列印&amp;quot;文件到手機?&lt;br/&gt;&lt;br/&gt;測了一下果然是如此, 在我的手機上會多了一份pdf, 內容就是由我的電腦列印過去的, 而且是透過Google Cloud Print, 打開Cloud Print的設定, 可以看到Print Jobs的確有我剛列印過去的&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/17auoeA" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="110" src="http://bit.ly/Z5v1ia" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;這功能需要有登入Cloud Print, 並且手機也要安裝Chrome才可以&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;a href="http://bit.ly/17auoeC"&gt;http://bit.ly/17auoeC&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/17aurqL" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="89" src="http://bit.ly/Z5v1ic" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;不知道實不實用, 還蠻有趣的就是了&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/17aurqN"&gt;http://bit.ly/17aurqN&lt;/a&gt;</description></item><item><title>[Android dev] JsonReader</title><link>https://blog.jln.co/Android-dev-JsonReader/</link><pubDate>Tue, 02 Apr 2013 02:02:33 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-dev-JsonReader/</guid><description>原本在Android下解析JSON內容,  大多用&lt;a href="http://bit.ly/14AliYI" target="_blank"&gt;JSONObject&lt;/a&gt;和&lt;a href="http://bit.ly/16rSIaD" target="_blank"&gt;JSONArray&lt;/a&gt;, 這兩個是很簡單的JSON parser, 只要將字串(String)傳入即可&lt;br/&gt;&lt;br/&gt;不過, 這跟在用DOM解析XML是有類似的問題, 解析文件是一氣呵成, 必須要把所有內容先走過一遍, 也需要更多的記憶體來儲存, 這對於解析較大的文件是一個大問題, 必須要花費更多時間和空間, 而且如果所需要的資料就算只是整份文件中間的一小部分, 還是得先把整份文件走完, 在XML, 可以用SAX來解決這問題, 但Android要到API level 11(Honeycomb) 才新增了&lt;a href="http://bit.ly/14AljMq" target="_blank"&gt;JsonReader&lt;/a&gt;這個算是JSON界的SAX的解決方案&lt;br/&gt;&lt;br/&gt; &lt;a href="http://bit.ly/14AljMq" target="_blank"&gt;JsonReader&lt;/a&gt;類似SAX, 也是一種streaming parser, 並不用一次讀出所有字串內容, 它要的只是個Reader, 但不太像SAX屬於事件驅動(event driven)的方式, 它應該比較像token consuming, 它定義了幾類基本的&lt;a href="http://bit.ly/14AljMr" target="_blank"&gt;JsonToken&lt;/a&gt;,  它也有BEGIN(END)_OBJECT, BEGIN(END)_ARRAY這種類似SAX中startElement, endElement, 但卻沒類似SAX的startDocument&lt;br/&gt;&lt;br/&gt;解析一個JSON物件的程式碼如下:&lt;br/&gt;&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;pre&gt;&lt;b&gt; &lt;span style="color: #990000;"&gt; {username:"Bob", age: 14, sex: "m"}&lt;/span&gt;&lt;/b&gt;&lt;span style="color: #990000;"&gt; &lt;/span&gt;&lt;/pre&gt;&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;&lt;pre&gt;&lt;b&gt; reader.beginObject();&lt;/b&gt;&lt;br/&gt; while (reader.hasNext()) {&lt;br/&gt; String name = &lt;b&gt;reader.nextName();&lt;/b&gt;&lt;br/&gt; if (name.equals("username")) {&lt;br/&gt; username = reader.nextString();&lt;br/&gt; } else if (name.equals("age")) {&lt;br/&gt; followersCount = reader.nextInt();&lt;br/&gt; } &lt;span style="color: #990000;"&gt;else {&lt;br/&gt; reader.skipValue();&lt;br/&gt; }&lt;/span&gt;&lt;br/&gt; }&lt;br/&gt;&lt;b&gt;reader.endObject();&lt;/b&gt;&lt;/pre&gt;&lt;/blockquote&gt;解析一個物件, 要從beginObject開始(陣列則是beginArray), endObject結束, 接著透過一個while loop一個個走過這物件內所有的token, 說實在的, 不是很好debug,  你必須要先知道下一個要處理的token是啥類別, 以上面的例子為例, 物件內第一個token是&amp;quot;username&amp;quot;, 這是一個JsonToken.NAME, 因此要用nextName來處理, 搞錯了就會出錯, 還不容易知道錯哪,  而上面那例子裡的&amp;quot;else&amp;quot;也是必須的, 拿掉的話, 在endObject就會出錯, 因為這段程式並沒去處理&amp;quot;sex&amp;quot;, 因此處理完sex這個名字後, 並未消化掉&amp;quot;m&amp;quot;這個值(JsonToken.STRING), 而是直接endObject, 這會產生一個IllegalStateException&lt;br/&gt;&lt;br/&gt;為了避免用了錯誤的方式處理下一個token, 可以先用&lt;a href="http://bit.ly/16rSFLX" target="_blank"&gt;peek()&lt;/a&gt;來看一下下一個要處理的種類&lt;br/&gt;&lt;br/&gt;在可讀性上, 用JsonReader寫出的並不是很好, 但它卻適合來處理大的JSON文件, 或是像Twitter Streaming API這種幾乎無止盡的&lt;br/&gt;&lt;br/&gt;這當然也不是只有在Android上有, Google也早把這也&lt;a href="http://bit.ly/14AljMt" target="_blank"&gt;包含到GSON去了&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/16rSFLZ"&gt;http://bit.ly/16rSFLZ&lt;/a&gt;</description></item><item><title>可以用來取代Google Reader的另一個Google產品 - Currents (潮流同步)</title><link>https://blog.jln.co/%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BE%86%E5%8F%96%E4%BB%A3Google-Reader%E7%9A%84%E5%8F%A6%E4%B8%80%E5%80%8BGoogle%E7%94%A2%E5%93%81-Currents-%E6%BD%AE%E6%B5%81%E5%90%8C%E6%AD%A5/</link><pubDate>Fri, 22 Mar 2013 02:02:05 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E5%8F%AF%E4%BB%A5%E7%94%A8%E4%BE%86%E5%8F%96%E4%BB%A3Google-Reader%E7%9A%84%E5%8F%A6%E4%B8%80%E5%80%8BGoogle%E7%94%A2%E5%93%81-Currents-%E6%BD%AE%E6%B5%81%E5%90%8C%E6%AD%A5/</guid><description>&lt;p&gt;最近科技界比較流行的戲碼是: Google要把Google Reader給送上斷頭台了&lt;br/&gt;&lt;br/&gt;這齣戲有點輕肥皂劇的感覺, 先是Google公布要把Reader給喀嚓了, 再來就是一堆重度使用者叫苦連天, 一堆原本吃Google reader豆腐的服務跳出來說要接手實作替代方案, 緊接著是&lt;a href="http://b.qr.ae/14ZiNey"&gt;Google reader的Product manager 在Quora上爆料Google都把人抽去做Google+&lt;/a&gt;, 再來就是有重量級的部落格重炮轟擊Google關掉受歡迎的東西卻拿人力去開發沒用的東西(Google+), 對於這樣的評論, 個人是認為&amp;quot;言重了&amp;quot;, 我自己本身的觀點跟這些是有點相反的, 不過我的觀點不主流, 這篇也不是為了談這個, 只是先行加點小小囉嗦&amp;hellip; :P&lt;br/&gt;&lt;br/&gt;Google Reader停了, 對原本的重度使用者以及使用到他的服務比如說feedly, 應該是重傷不少, 對我個人而言, 影響不大, 我在幾年前早把我消耗資訊的習慣, 從Reader轉到Twitter了, 個人認為Twitter也是一個很好的消化資訊的管道&lt;br/&gt;&lt;br/&gt;不過, 先不管Reader和Twitter&amp;hellip;你聽過Google有一個跟Reader同質性相當高的服務叫Google Currents嗎? 這是一個在這一年內(應該是吧)的新服務(中文譯名是有點矬):&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>Twitter 1.1 API的Search不再是不需要Authentication的了</title><link>https://blog.jln.co/Twitter-1.1-API%E7%9A%84Search%E4%B8%8D%E5%86%8D%E6%98%AF%E4%B8%8D%E9%9C%80%E8%A6%81Authentication%E7%9A%84%E4%BA%86/</link><pubDate>Thu, 14 Mar 2013 00:47:39 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Twitter-1.1-API%E7%9A%84Search%E4%B8%8D%E5%86%8D%E6%98%AF%E4%B8%8D%E9%9C%80%E8%A6%81Authentication%E7%9A%84%E4%BA%86/</guid><description>&lt;p&gt;以往Twitter的search API是不需要任何認證, 也不需要設定啥App ID或啥consumer key的, 不過, 在API 1.1之後, 這就改了&lt;br/&gt;&lt;br/&gt;因為1.1, search也列入rate limit的追蹤囉, 所以使用search API也要做認證(Authentication), 但由於search api的使用情境, 不見得一定需要使用者登入, 有些做資料分析的應用也有可能會用到, 所以強制用OAuth就有點不是很合理, 所幸, 除了用OAuth以外, 這類的API也可以使用&lt;a href="http://bit.ly/XDV7N4" target="_blank"&gt;Application-only authentication&lt;/a&gt;:&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Mac] 在Qt中使用自訂的Info.plist</title><link>https://blog.jln.co/Mac-%E5%9C%A8Qt%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E8%A8%82%E7%9A%84Info.plist/</link><pubDate>Fri, 15 Feb 2013 22:31:25 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Mac-%E5%9C%A8Qt%E4%B8%AD%E4%BD%BF%E7%94%A8%E8%87%AA%E8%A8%82%E7%9A%84Info.plist/</guid><description>&lt;p&gt;iOS和Mac OS的應用程式裡都有個&lt;a href="http://bit.ly/VYVPQL"&gt;info.plist&lt;/a&gt;放置著應用程式相關的設置, 用Qt開發Mac應用程式時, 這個檔是在編譯時自動產生, 因此幾乎是固定內容&lt;br/&gt;&lt;br/&gt;但還是有需要在info.plist內加入額外的內容, 比如說Retina display的支援(NSHighResolutionCapable), 預設並沒有, 因此還是有需要做自訂的info.plist&lt;br/&gt;&lt;br/&gt;作法並不難, 在專案檔(通常是 xxxx.pro)內加入下面的內容:&lt;br/&gt;&lt;/p&gt;</description></item><item><title>讓Eclipse支援Retina Display</title><link>https://blog.jln.co/%E8%AE%93Eclipse%E6%94%AF%E6%8F%B4Retina-Display/</link><pubDate>Sun, 10 Feb 2013 05:18:50 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E8%AE%93Eclipse%E6%94%AF%E6%8F%B4Retina-Display/</guid><description>&lt;p&gt;前陣子買了一台Retina display的mac book pro, 興沖沖的把一切都設定好後, 正很滿足的想要用這漂亮的畫面開始工作時, 一打開Eclipse後, 一整個傻眼, 字變糊變鋸齒, 看來Eclipse對Retina display並沒有很好的支援, 查詢過各方資料後, 所幸還有救(不然就想投奔到別的IDE去了)&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Android][筆記] BitmapShader</title><link>https://blog.jln.co/Android%E7%AD%86%E8%A8%98-BitmapShader/</link><pubDate>Tue, 22 Jan 2013 20:32:39 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android%E7%AD%86%E8%A8%98-BitmapShader/</guid><description>&lt;p&gt;&lt;a href="http://bit.ly/TT9RFS"&gt;http://bit.ly/TT9RFS&lt;/a&gt;&lt;br/&gt;這篇文章裡面使用到了BitmapShader做圓角的效果, 使用這方法, 如果drawRect的大小比原先大的話, 會根據Shader.TileMode來畫出不同的效果:&lt;br/&gt;&lt;br/&gt;Shader.TileMode.CLAMP (效果: 尾端拉長) &amp;ndash;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[iOS] 利用Smart App Banners在網頁上推廣Native App</title><link>https://blog.jln.co/iOS-%E5%88%A9%E7%94%A8Smart-App-Banners%E5%9C%A8%E7%B6%B2%E9%A0%81%E4%B8%8A%E6%8E%A8%E5%BB%A3Native-App/</link><pubDate>Fri, 28 Dec 2012 02:24:19 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/iOS-%E5%88%A9%E7%94%A8Smart-App-Banners%E5%9C%A8%E7%B6%B2%E9%A0%81%E4%B8%8A%E6%8E%A8%E5%BB%A3Native-App/</guid><description>&lt;div class="separator" style="clear: both; text-align: left;"&gt;起初先在Flickr網頁注意到這個:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/VDf9Bk" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="320" src="http://bit.ly/UoEQcg" width="213"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;按下open就會直接帶你到App store下載Flickr App, 這就是iOS6開始有的Smart App Banners, 覺得頗有趣的, 就去看了原始碼查了一下作法:&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;blockquote class="tr_bq"&gt;&lt;/blockquote&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;以上這是Flickr的HTML裡面的, 作法很簡單, 就只是在HTML內放個&amp;quot;apple-itunes-app&amp;quot;的meta tag, 指定app-id和參數(非必須)&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;Android應該也要加個這東西才對呀&amp;hellip;..&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/VDfbcw"&gt;http://bit.ly/VDfbcw&lt;/a&gt;</description></item><item><title>好像該寫個開箱文 - 白蝴蝶</title><link>https://blog.jln.co/%E5%A5%BD%E5%83%8F%E8%A9%B2%E5%AF%AB%E5%80%8B%E9%96%8B%E7%AE%B1%E6%96%87-%E7%99%BD%E8%9D%B4%E8%9D%B6/</link><pubDate>Fri, 28 Dec 2012 02:07:37 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E5%A5%BD%E5%83%8F%E8%A9%B2%E5%AF%AB%E5%80%8B%E9%96%8B%E7%AE%B1%E6%96%87-%E7%99%BD%E8%9D%B4%E8%9D%B6/</guid><description>&lt;p&gt;等了那麼久, 蝴蝶終於飛來了, 實在有點歷經波折呀~~~&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/UoDiz5" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://bit.ly/VDbmUF" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;br/&gt;這不是我第一支預購的自己公司的產品, 第一支是給老婆的Sensation, 這算第二支, 為啥堅持要預購, 還追那麼勤勞? 1. 自己用過一段時間, 這的確是好產品! 2. 從預購開始, 才能真正體驗完整的使用者體驗呀&amp;hellip; (剛掰的) 3. 拿好手機在街上走不用遮遮掩掩的&amp;hellip;.&lt;br/&gt;&lt;br/&gt;不過這次還真一波三折, 經歷了貨等不到, 換了顏色(本想買紅的), 又拿到亮點機, 都已經跟店員打熟了&amp;hellip;.&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/UoDiz7" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="150" src="http://bit.ly/VDbmUH" width="200"/&gt;&lt;/a&gt;&lt;a href="http://bit.ly/UoDiz9" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="200" src="http://bit.ly/VDbkMz" width="150"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="" style="clear: both; text-align: left;"&gt;外盒, 蠻簡潔的, 不過少了以前HTC一貫的塗鴉風格設計, 有一點不習慣, 還是喜歡塗鴉風, 比較可愛&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/UoDkHf" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="200" src="http://bit.ly/VDbmUJ" width="150"/&gt;&lt;/a&gt;&lt;a href="http://bit.ly/UoDkHh" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="200" src="http://bit.ly/VDbmUL" width="150"/&gt;&lt;/a&gt;&lt;a href="http://bit.ly/UoDkHl" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="200" src="http://bit.ly/VDbkMB" width="150"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;本來想買紅的, 之前用過一陣子紅的, 覺得紅的很搶眼頗漂亮的, 但紅的實在缺的兇, 只好跟店員說我紅白都可(我實在沒辦法喜歡黑的), 本想說白不是整支純白並沒紅的來的好看, 但拿上手後, 反而覺得我喜歡白的勝過紅的呀&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/UoDizb" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="240" src="http://bit.ly/VDbnb5" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;br/&gt;&lt;/div&gt;&lt;div class="separator" style="clear: both; text-align: left;"&gt;去專賣店預購就是為了這個呀&amp;hellip;送皮套的刮刮卡呀&amp;hellip;. &lt;/div&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/UoDizd"&gt;http://bit.ly/UoDizd&lt;/a&gt;</description></item><item><title>[開箱] 今年的生日禮物 Tissot PRC 200 機械錶</title><link>https://blog.jln.co/%E9%96%8B%E7%AE%B1-%E4%BB%8A%E5%B9%B4%E7%9A%84%E7%94%9F%E6%97%A5%E7%A6%AE%E7%89%A9-Tissot-PRC-200-%E6%A9%9F%E6%A2%B0%E9%8C%B6/</link><pubDate>Sun, 25 Nov 2012 22:56:48 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E9%96%8B%E7%AE%B1-%E4%BB%8A%E5%B9%B4%E7%9A%84%E7%94%9F%E6%97%A5%E7%A6%AE%E7%89%A9-Tissot-PRC-200-%E6%A9%9F%E6%A2%B0%E9%8C%B6/</guid><description>&lt;p&gt;去年的生日禮物是&lt;a href="http://bit.ly/TX65q1"&gt;耳機 (AKG K-701)&lt;/a&gt; , 今年則是因為原本戴的FOSSIL錶打球的時候壞了,修又差不多買新的一半以上的錢(壞的好嚴重呀), 備用的錶的錶帶又常常脫落戴的不舒服, 所以就打算換隻錶&lt;br/&gt;&lt;br/&gt;本來是看SEIKO, CITIZEN, 看金城武跟王力宏代言看起來蠻帥的, 日本錶功能又多, 科技感濃厚, 就有點感興趣, 不過直到昨天, 跑去看007電影Skyfall, Bonds戴的Omega也蠻帥的呀, 不過自己平常對錶沒啥研究, 不知道, 這還真是我買不起的高貴, 買不起Omega還是繼續跑去專櫃看了SEIKO, CITIZEN, 實際上看了實物, 還是失望了, 這不是我想要的型, 才發現我喜歡的並不是這麼濃的科技感, 而是比較古老一點的機械&lt;br/&gt;&lt;br/&gt;再逛了一下瑞士的錶款, 還真一個比一個高貴, 好像只有TISSOT是外型跟價位還是我可以接受的, 所以今天就找了老婆, 小遠跟我去敗了這隻 - TISSOT PRC 200機械錶, 這還真是我戴過最貴的(羞), 也是第一隻機械錶&lt;br/&gt;&lt;br/&gt;紅黑色的外盒:&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Go筆記] UUID package</title><link>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-UUID-package/</link><pubDate>Tue, 13 Nov 2012 23:52:30 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-UUID-package/</guid><description>&lt;p&gt;自己想做的東西可能需要一個&lt;a href="http://bit.ly/X3vXZH"&gt;UUID&lt;/a&gt;的產生器, 找了一下既有的packages跟網路上的, 好像沒一個自己滿意的, 所以就自己從&lt;a href="http://bit.ly/SJP6bZ"&gt;java.util.UUID&lt;/a&gt; po過來&lt;br/&gt;&lt;br/&gt;Source在此: &lt;a href="http://bit.ly/X3w0V7"&gt;http://bit.ly/X3w0V7&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;目前只implement&lt;a href="http://bit.ly/X3vZAx"&gt; RFC 4122&lt;/a&gt; Version 4&lt;br/&gt;&lt;br/&gt;Sample:&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/SJP43I"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/X3w0Vb"&gt;http://bit.ly/X3w0Vb&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[node.js] 在heroku上用bower管理前端第三方元件</title><link>https://blog.jln.co/node.js-%E5%9C%A8heroku%E4%B8%8A%E7%94%A8bower%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF%E7%AC%AC%E4%B8%89%E6%96%B9%E5%85%83%E4%BB%B6/</link><pubDate>Wed, 07 Nov 2012 23:19:07 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/node.js-%E5%9C%A8heroku%E4%B8%8A%E7%94%A8bower%E7%AE%A1%E7%90%86%E5%89%8D%E7%AB%AF%E7%AC%AC%E4%B8%89%E6%96%B9%E5%85%83%E4%BB%B6/</guid><description>&lt;p&gt;在做web applications時，或多或少都會使用到像是jQuery, bootstrap這類的第三方元件，使用已經host在既有CDN 的版本（比如說google的）是一個不錯的方法，但不是每一種都有這類方案，一個個從各網站下載回本地端又不是那麼容易管理，&lt;a href="http://bit.ly/QuXxeM"&gt;bower&lt;/a&gt;就是為此出現的，&lt;a href="http://bit.ly/QuXxeM"&gt;bower&lt;/a&gt;是一個類似npm的軟體，由Twitter所開發出來且是開放原始碼，所不同的是，npm是管理node.js相關的套件，但bower是管前端的&lt;br/&gt;&lt;br/&gt;舉一個例子，你可以利用bower來安裝jQuery :&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[node.js] 用npm安裝放在github上的module</title><link>https://blog.jln.co/node.js-%E7%94%A8npm%E5%AE%89%E8%A3%9D%E6%94%BE%E5%9C%A8github%E4%B8%8A%E7%9A%84module/</link><pubDate>Mon, 05 Nov 2012 22:13:04 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/node.js-%E7%94%A8npm%E5%AE%89%E8%A3%9D%E6%94%BE%E5%9C%A8github%E4%B8%8A%E7%9A%84module/</guid><description>&lt;p&gt;剛剛為了想要做一個東西, 需要用到Flickr API, 本想要拿&lt;a href="http://passport.js/"&gt;Passport.js&lt;/a&gt;來處理Flickr OAuth的部份,但卻發現, FLickr Strategy的部份不但年久, 而且permission這部份居然是hard code &amp;ldquo;read&amp;rdquo;, 由於我想做的東西是要write, 其實是可以靠overwrite &amp;ldquo;userAuthorizationURL&amp;quot;來達到這目的, 不過這樣不好看, 所以就乾脆自己fork一版來改 (Github真是好物來改)&lt;br/&gt;&lt;br/&gt;改完後的一個問題是, 原本可以用&amp;quot;npm install passport-flickr&amp;quot;來安裝這module, 但由於我fork出來的並未註冊在npm, 所以就得用另一個方式:&lt;br/&gt;&lt;/p&gt;</description></item><item><title>竹北。梨頭山</title><link>https://blog.jln.co/%E7%AB%B9%E5%8C%97%E6%A2%A8%E9%A0%AD%E5%B1%B1/</link><pubDate>Sun, 04 Nov 2012 02:18:33 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AB%B9%E5%8C%97%E6%A2%A8%E9%A0%AD%E5%B1%B1/</guid><description>今天有點時間, 想說出門拍個照, 在網路上稍微查了一下看看有沒啥制高點可以拍高鐵,平常從底下拍高鐵拍的有點無聊了, 所以就找到了梨頭山, 反正也離家不遠 到梨頭山, 可以從文山國小有個登山步道上去&lt;br/&gt;&lt;br/&gt;  &lt;iframe frameborder="0" height="350" marginheight="0" marginwidth="0" scrolling="no" src="http://bit.ly/U0s5AX" width="425"&gt;&lt;/iframe&gt;&lt;br/&gt;&lt;small&gt;&lt;a href="http://bit.ly/U7yIHm" style="color: blue; text-align: left;"&gt;View Larger Map&lt;/a&gt;&lt;/small&gt; &lt;br/&gt;&lt;br/&gt;住這邊這麼久了, 說真的, 還沒來過這, 碰了運氣找到了入口, 感覺好像還真是個人煙罕至的地方&lt;br/&gt;&lt;br/&gt;&lt;a href="http://bit.ly/U0s5Rb" title="DSC04718 by Julian Shen, on Flickr"&gt;&lt;img alt="DSC04718" height="500" src="http://bit.ly/U7yKiw" width="333"/&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;太久沒啥運動, 這坡度爬起來還真有點喘, 也不知道該爬多高才可以看到高鐵, 其間曾一度在樹林縫隙看到了軌道, 不過這並不是最佳位置, 到了山頂上, 果然名不虛傳呀, 高鐵站周邊景色一覽無遺&lt;br/&gt;&lt;br/&gt;&lt;a href="http://bit.ly/U0s8fX" title="DSC04957 by Julian Shen, on Flickr"&gt;&lt;img alt="DSC04957" height="333" src="http://bit.ly/U7yKiC" width="500"/&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;在這邊用長焦段的鏡頭並不難捕捉到高鐵的身影, 不過新買的反射鏡實在令人失望, 不但不好對焦畫質也差, 只好用super takumar 135mm這隻俗又好用的鏡頭&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href="http://bit.ly/U0s8fZ" title="DSC04917 by Julian Shen, on Flickr"&gt;&lt;img alt="DSC04917" height="333" src="http://bit.ly/U7yIHq" width="500"/&gt;&lt;/a&gt;&lt;br/&gt;&lt;a href="http://bit.ly/U0s5Rd" title="DSC04889 by Julian Shen, on Flickr"&gt;&lt;img alt="DSC04889" height="333" src="http://bit.ly/U7yKiG" width="500"/&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;這邊的景致還不錯, 而且離我家非常的近, 可以俯瞰高鐵站&lt;br/&gt;&lt;br/&gt;下次有機會再來去湖口另一個拍攝地點看看好了&amp;hellip;.&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/U0s8g1"&gt;http://bit.ly/U0s8g1&lt;/a&gt;</description></item><item><title>[Go 筆記] Type, method, and interface</title><link>https://blog.jln.co/Go-%E7%AD%86%E8%A8%98-Type-method-and-interface/</link><pubDate>Fri, 02 Nov 2012 21:33:26 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-%E7%AD%86%E8%A8%98-Type-method-and-interface/</guid><description>&lt;blockquote class="tr_bq"&gt;&lt;b&gt;&lt;i&gt;&amp;ldquo;Go was born out of frustration with existing languages and environments for systems programming.&amp;rdquo;&lt;/i&gt;&lt;/b&gt;&lt;/blockquote&gt;Go 是為了作為一個系統語言(systems programming language)而存在的, 它跟天下知名的C語言有同一個父親 - Ken Thompson , 作為一個系統語言, 它並不是直譯式語言, 也非跑在虛擬機(virtual machine)上, 而是貨真價實的像C一樣是先編譯(compile), 而且也是屬於strong and static type的語言, 這表示, 變數型別是預先宣告/決定的, 而且是不能半路變更的, 變數可以像這樣宣告:&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;var StrVariable string &lt;/i&gt;&lt;br/&gt;&lt;i&gt;var IntVariable int&lt;/i&gt;&lt;/blockquote&gt;這邊跟C, Java之類的語言不同的地方是, 型別定義是在後面不是放前面, 剛看到時我以為我會不習慣, 但卻花沒很多時間就適應了, 可能是我在很早以前寫過PASCAL的關係吧, PASCAL也是類似的寫法&lt;br/&gt;&lt;br/&gt;但, Go其實還引入了一些dynamic language的特性, 因此在Go內也可以看到未經上面類型的宣告, 就直接指定的敘述, 像是:&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;strVariable2 := &amp;ldquo;Hello Go&amp;rdquo;&lt;/i&gt;&lt;/blockquote&gt;這敘述並不代表Go也有dynamic typed的設計, 其實這設計是同時結合了宣告跟指定(assignment), strVariable2並不是沒有型別或動態型別, 因為&amp;quot;:=&amp;ldquo;的關係, 使得strVariable2一開始就被宣告成後面值的型別, 因此上面那行跟下面一樣:&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;var strVariable2 string &lt;/i&gt;&lt;br/&gt;&lt;i&gt;strVariable2 = &amp;quot;Hello Go&amp;rdquo;&lt;/i&gt;&lt;/blockquote&gt;同理, &amp;ldquo;intVariable2 := 1&amp;quot;這敘述表示intVariable一開始就被宣告成整數(因為1是整數), 所以它還是一個strong typed的設計, 這邊比較要注意到的一個陷阱是&amp;rdquo;=&amp;ldquo;和&amp;rdquo;:=&amp;ldquo;, 在已宣告過型別的變數, 是用正常的&amp;rdquo;=&amp;ldquo;來指定值, 但在未宣告的變數, 必須要用 &amp;rdquo;:=&amp;ldquo;&lt;br/&gt;&lt;br/&gt;你不能做的是&amp;hellip; &amp;quot;strVariable2 = 1&amp;rdquo;, 因為strVariable2在前面已經&amp;quot;:=&amp;ldquo;被宣告成字串(string)&lt;br/&gt;&lt;br/&gt;在Go, 你一樣可以自定型別, 結構(struct)&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;type MyString string&lt;/i&gt;&lt;/blockquote&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;type User struct {&lt;br/&gt;    Uid int&lt;br/&gt;    Name string&lt;br/&gt;} &lt;/i&gt;&lt;/blockquote&gt;之後, 你就可以用MyString或是User來宣告變數, 像是&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;var M1 MyString&lt;br/&gt;var User1 User&lt;br/&gt;User2 := User {1, &amp;quot;julian&amp;rdquo;}&lt;/i&gt;&lt;/blockquote&gt;&amp;ldquo;type MyString string&amp;quot;有點像是C語言的typedef, 可以讓你以另一個型別(MyString)來替代原本的型別(string), 但它其實還有個妙用, 在後面會再提到&lt;br/&gt;&lt;br/&gt;Go是一個functional programming language, 所以它並&lt;b&gt;沒有物件導向&lt;/b&gt;觀念&lt;br/&gt;&lt;br/&gt;沒有&amp;quot;類別&amp;rdquo;(class), 沒有物件/實體(object/instance), 但, 它卻有&amp;quot;方法&amp;quot;(method)和&amp;quot;介面&amp;quot;(interface), 聽起來有點四不像, 但其實這部份還蠻有趣的&lt;br/&gt;&lt;br/&gt;先說到&amp;quot;方法&amp;quot;(method), 在Go, 你可以為你的型別設計一個&amp;quot;方法&amp;quot;, 像是這樣:&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;func (u *User) Hi() {&lt;br/&gt;    fmt.Printf(&amp;ldquo;Hi! I&amp;rsquo;m %s. The %d user.\n&amp;rdquo;, u.Uid, u.Name)&lt;br/&gt;}&lt;/i&gt;&lt;/blockquote&gt;這邊&amp;quot;Hi()&amp;ldquo;就是屬於&amp;quot;User&amp;quot;的一個方法, 呼叫&amp;quot;User2.Hi()&amp;quot;即可執行它, 方法跟一般的函數一樣, 所不同的是, 前面多了一個&amp;rdquo;(u *User)&amp;ldquo; 以這例子來說, 這邊就是定義了&amp;quot;Hi()&amp;quot;的母體是 *User (*是指標- pointer的意思, 就不在這邊解釋)&lt;br/&gt;&lt;br/&gt;這邊有趣的地方是, 你可以為任何自定型別創造&amp;quot;方法&amp;rdquo;, 包含函數(function), 這在&amp;quot;net/http&amp;quot;內就可以找到類似的應用:&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/SkFh4m"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;在這例子中, HandlerFunc有一個ServeHTTP的方法, 但HandlerFunc本身其實是一個function&lt;br/&gt;&lt;br/&gt;&amp;ldquo;介面&amp;rdquo;(interface)也是一個蠻妙的東西, 在Java裡, interface必須要宣告&amp;quot;實作&amp;quot;, 亦即&amp;quot;class MyImpl implements MyInterface&amp;quot;, 也就是你必須指定某個class實作了某個interface&lt;br/&gt;&lt;br/&gt;但在Go, 則是很不一樣, 在Go裡, 你可以宣告一個&amp;quot;介面&amp;quot;(interface) 像是&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;type MyInterface interface {&lt;br/&gt;    Foo()&lt;br/&gt;}&lt;/i&gt;&lt;/blockquote&gt;但你不需要宣告某個型別&amp;quot;實作&amp;quot;了這個interface, 在Go, interface反而比較有&amp;quot;暗示&amp;quot;(imply)的意味, 也就是, 下面的例子, 不用任何宣告, 你可以把MyString自動當成它也可以是一個MyInterface:&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;func (s MyString) Foo() {&lt;/i&gt;&lt;i&gt;}&lt;/i&gt;&lt;/blockquote&gt;因為在MyInterface的定義中, 它含有一個&amp;quot;Foo()&amp;ldquo;, 當你替MyString宣告了一個&amp;quot;Foo()&amp;quot;的方法時, 就自動讓MyString變成了一個實作了MyInterface的型別&lt;br/&gt;&lt;br/&gt;下面用一個比較完整的例子來總結:&lt;br/&gt;&lt;script src="http://bit.ly/TyPcq5"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;在這例子中, &amp;quot;CallFoo(MyInterface)&amp;quot;接受一個MyInterface的參數, 並執行它&amp;quot;Foo()&amp;quot;的方法, 由於&amp;quot;Aa&amp;rdquo;(字串)和&amp;quot;MyHandler&amp;quot;(函數)都是有一個&amp;quot;Foo()&amp;ldquo;的方法, 所以他們都可以被當做MyInterface作為參數, 同理, 回到前一個HandlerFunc範例, HandlerFunc其實也可以被當做Handler這個interface來使用, 在&amp;quot;net/http&amp;quot;的API中就是用到了這樣一個技巧&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/SkFhkC"&gt;http://bit.ly/SkFhkC&lt;/a&gt;</description></item><item><title>[Go筆記] Heroku, Facebook</title><link>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-Heroku-Facebook/</link><pubDate>Thu, 01 Nov 2012 09:57:47 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-Heroku-Facebook/</guid><description>&lt;p&gt;最近給自己一個作業寫了一個Go版的Facebook API, 本想要實作realtime api時想到, 我需要把這server開放給Facebook server可以存取&lt;br/&gt;&lt;/p&gt;</description></item><item><title>第一次用impress.js做的投影片: Introduction to node.js</title><link>https://blog.jln.co/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8impress.js%E5%81%9A%E7%9A%84%E6%8A%95%E5%BD%B1%E7%89%87-Introduction-to-node.js/</link><pubDate>Wed, 31 Oct 2012 23:29:36 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%94%A8impress.js%E5%81%9A%E7%9A%84%E6%8A%95%E5%BD%B1%E7%89%87-Introduction-to-node.js/</guid><description>&lt;p&gt;明天要在team內開一堂node.js簡介的課, 每次老是用Powerpoint和keynote做投影片, 開始有點乏味了, 所以這次打算嘗試一下&lt;br/&gt;&lt;br/&gt;&lt;a href="http://impress.js/"&gt;&lt;b&gt;&lt;span style="font-size: large;"&gt;Impress.js&lt;/span&gt;&lt;/b&gt;&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;這跟一般投影片製作軟體很不一樣, 正確說來它是一個javascript framework而非一個完整的軟體, 所以也沒啥GUI(似乎也有不少人幫它寫editor), 不過基本說來, 用它來做投影片的方式, 就是拿source codes裡的html檔來改就對了&lt;br/&gt;&lt;br/&gt;出來的結果很炫, 但編寫的過程有點小累, 所以後面有點偷懶, 不過也完成了明天要講的投影片:&lt;br/&gt;&lt;br/&gt;&lt;a href="http://bit.ly/X0S95r"&gt;Introduction to node.js&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;寫完了之後, 想把它開放出來, 我之前放投影片都依賴了slideshare, 不過slideshare並不能吃這種檔案呀! 所以host又是另一個問題, 所幸, 還有developer的好朋友 - github&lt;br/&gt;&lt;br/&gt;github有個好東西叫page, 可以讓你放一些介紹網頁, 也可以有自己的host name像是&amp;quot;julianshen.github.com&amp;quot;, 只要照下面這網頁內的說明, 就可以建立屬於自己project的&amp;quot;page&amp;quot;:&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Go筆記] Go on GAE: 比"Hello World"多一點點: 處理static files</title><link>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-Go-on-GAE-%E6%AF%94Hello-World%E5%A4%9A%E4%B8%80%E9%BB%9E%E9%BB%9E-%E8%99%95%E7%90%86static-files/</link><pubDate>Thu, 25 Oct 2012 00:18:23 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-Go-on-GAE-%E6%AF%94Hello-World%E5%A4%9A%E4%B8%80%E9%BB%9E%E9%BB%9E-%E8%99%95%E7%90%86static-files/</guid><description>&lt;p&gt;今天被問到Go適合用在哪方面, 至今只看了Go兩個晚上的我, 實在很難回答這問題, 先從FAQ找來創立Go的目的說起:&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;&lt;span style="color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 16px;"&gt;&amp;ldquo;Go is an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language. It also aims to be modern, with support for networked and multicore computing. Finally, it is intended to be &lt;/span&gt;&lt;span style="color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 16px;"&gt;fast&lt;/span&gt;&lt;span style="color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 16px;"&gt;: it should take at most a few seconds to build a large executable on a single computer. To meet these goals required addressing a number of linguistic issues: an expressive but lightweight type system; concurrency and garbage collection; rigid dependency specification; and so on. These cannot be addressed well by libraries or tools; a new language was called for.&amp;rdquo;&lt;/span&gt;&lt;/i&gt;&lt;/blockquote&gt;簡而言之, Go的目標是一個簡單又有效率的語言, 加上一開始設計就考慮網路以及多核, 就姑且說它適合server端的開發吧&lt;br/&gt;&lt;br/&gt;事實上, GAE(Google AppEngine)也是有支援Go的 (怎麼說呢, 好歹這也是Google自己親生的呀)&lt;br/&gt;&lt;br/&gt;那, 現在開發server端的工具那麼多種, 有什麼樣的理由是選Go優於其他解決方案呢? 以效率來說, 或許比較好吧, 既然它是原生碼, 應該會快一些吧, 但這也沒啥好的benchmark來佐證, 劣勢呢? 以node.js來相比好了(今年看比較多這個, 直覺拿這來做比較), 它不但沒既有的developer做基礎(既有的javascript developer是很大一群的), 也沒有數量很多且快速增長的第三方模組可供利用(雖然, 盲目用npm上的模組, 某種程度上要承擔一定的風險), 最大的問題就是&amp;hellip;.&lt;b&gt;&amp;ldquo;文件&amp;rdquo;&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;以上前半段是抱怨文, 不過文件不足也沒辦法當啥藉口, 這年頭&amp;hellip;.&amp;ldquo;做就對了&amp;rdquo;&amp;hellip;..GAE上關於Go的文件也不是沒有, 跟著做, 就可以做出&amp;quot;Hello World&amp;quot;了, 但剛做完後, 突然楞住想&amp;hellip;.那&amp;hellip;我的html檔案放哪裡? 我總不能每個文件都寫在程式內, 總會有靜態檔案的呀! 有點讓我回到十幾年前寫CGI的感覺&lt;br/&gt;&lt;br/&gt;GAE的文件還真找不到, 但在Go的文件&lt;a href="http://bit.ly/SticN6"&gt;http.FileServer的範例&lt;/a&gt;可以找到解答, 但要把&amp;quot;FileServer&amp;quot;這個interface跟這件事聯想在一起還真有點不容易, 不過反正就是在程式內要加入下面這行來處理靜態檔案&lt;br/&gt;&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;http&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;.&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;Handle&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;(&lt;/span&gt;&lt;span class="s" style="background-color: white; border: 0px; color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;&amp;ldquo;/&amp;rdquo;&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;,&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; white-space: pre;"&gt; &lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;http&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;.&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;FileServer&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;(&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;http&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;.&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;Dir&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;(&lt;/span&gt;&lt;span class="s" style="background-color: white; border: 0px; color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;&amp;ldquo;./static&amp;rdquo;&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;)))&lt;/span&gt;&lt;/blockquote&gt;這範例讓你可以把靜態檔案放在&amp;quot;static&amp;quot;目錄下, 假設你在static目錄下放一個a.html, 那這行的目的就是可以讓你用 http://your_app_host/a.html來存取它&lt;br/&gt;&lt;br/&gt;我起始一個範例&lt;a href="http://bit.ly/StibZC"&gt;放在github上&lt;/a&gt;, 從這可以看完整的目錄結構, 未來相關範例也會放在這邊&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/SixshC"&gt;http://bit.ly/SixshC&lt;/a&gt;</description></item><item><title>[Go筆記] defer</title><link>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-defer/</link><pubDate>Wed, 24 Oct 2012 13:19:52 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-defer/</guid><description>&lt;p&gt;Go沒有exception handling這樣的設計, 所以沒有像java裡的try{} catch{} finally{&amp;hellip;}這種東西, 在java裡, 我們會用&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Go] Do not communicate by sharing memory; instead, share memory by communicating.</title><link>https://blog.jln.co/Go-Do-not-communicate-by-sharing-memory-instead-share-memory-by-communicating./</link><pubDate>Wed, 24 Oct 2012 01:25:12 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-Do-not-communicate-by-sharing-memory-instead-share-memory-by-communicating./</guid><description>&lt;blockquote class="tr_bq"&gt;Do not communicate by sharing memory; instead, share memory by communicating.  &lt;/blockquote&gt;這是在Go的concurrent programming裡一個很重要的精神, concurrent programming也是Go裡面一個相當重要的部份, 它已是語言本身的一部分&lt;br/&gt;&lt;br/&gt;&amp;ldquo;channel&amp;rdquo; 也就是這精神下的產物, channel可以說是多個thread之間溝通的工具, 有點像是&amp;quot;pipe&amp;quot;但又有點肩負多執行緒間synchronization的責任, 下面實作了一個concurrent merge sort (我想這例子蠻適合的)&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/T8STOo"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;&amp;ldquo;go&amp;quot;這個修飾字用來啟用一個goroutines, goroutine可以視為一個輕量的執行緒(lightware thread), 在這用了一個內容是整數陣列的channel: chan []int, channel必須要先用&amp;quot;make&amp;quot;初始化&lt;br/&gt;&lt;br/&gt;由於使用了&amp;rdquo;&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;MergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;leftChan&lt;/span&gt;&lt;span class="p"&gt;)&amp;ldquo;, 因此, 左右兩邊的merge sort是同時進行的, 直到兩邊都結束後才會執行&amp;quot;merge&amp;quot;的動作, 但用了&amp;quot;go&amp;quot;啟用了執行緒, 連續這兩行是不會卡住(block)等結果的, 那怎確定兩個執行緒都真的結束後才執行merge的動作? 這其中就是透過channel來做同步化的動作, &amp;rdquo;&lt;/span&gt;&lt;span class="n"&gt;ldata&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;leftChan&amp;quot;, 這一段是將leftChan這個channel的結果指定到ldata, 如果leftChan一直沒輸入(input)進來, 這一行就會等在這, 直到左邊的MergeSort執行到Merge結束後(r&amp;lt;-)&lt;/span&gt;&lt;br/&gt;&lt;span class="n"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="n"&gt;主程式也是叫起一個執行緒做MergeSort的動作, 等到結果產生才將結果印出, 整個不是很難懂, 但這思維還有點難調整(對我來說)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/VA5n9P"&gt;http://bit.ly/VA5n9P&lt;/a&gt;</description></item><item><title>[Go] Go語言中的Closure</title><link>https://blog.jln.co/Go-Go%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84Closure/</link><pubDate>Tue, 23 Oct 2012 20:26:45 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-Go%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84Closure/</guid><description>&lt;p&gt;我不太懂closure, 不懂的程度大概是我在用它的時候也沒有意識到我在用, 也沒玩過Go, 不過昨晚心血來潮的開始想用它來寫一些東西, 研究了一下, 發現它&amp;hellip;挺有趣的, 尤其是concurrent的部份, 以及讓我重新檢視了一下closure這部份&lt;br/&gt;&lt;br/&gt;在Go裡, function是可以像在javascript中一樣, 被指定到一個變數來使用:&lt;br/&gt;&lt;script src="http://bit.ly/RicXAa"&gt;&lt;/script&gt;&lt;br/&gt;上面兩個範例, 一個是把函式指定給一個變數, 一個是來當做回傳值, 這也是Go的closure大致上的形態, 在Go Tour的&lt;a href="http://bit.ly/POcY1X"&gt;第48頁的作業&lt;/a&gt;, 便是要求利用closure來完成Fibonacci數列的計算, 我們所熟知的Fibonacci數列(0, 1, 1, 2, 3, 5, 8 &amp;hellip; f(n) = f(n-1) + f(n-2))可以用iterative或recursive的方式來求解(&lt;a href="http://bit.ly/RicZbe"&gt;範例&lt;/a&gt;), 當然使用Go其實也可以採用這兩種方式: &lt;br/&gt;&lt;br/&gt;&lt;b&gt;&lt;i&gt;Iterative solution: &lt;/i&gt;&lt;/b&gt;&lt;br/&gt;&lt;script src="http://bit.ly/POcYPr"&gt;&lt;/script&gt;&lt;b&gt;&lt;i&gt;Recursive solution: &lt;/i&gt;&lt;/b&gt;&lt;br/&gt;&lt;script src="http://bit.ly/RicZbg"&gt;&lt;/script&gt; 如果單以公式看, Recursive solution是比較容易被理解的, 不過也比較有stack overflow的風險, 當然, 照這練習題的要求, 以上兩者都不滿足, 那改用closure來實作又是怎樣? &lt;br/&gt;&lt;script src="http://bit.ly/POcYPt"&gt;&lt;/script&gt; 整體上還算蠻簡潔的, 既然closure在javascript也很常被利用, 這邊放一個javascript的版本做一下比較: &lt;br/&gt;&lt;script src="http://bit.ly/RicZbi"&gt;&lt;/script&gt;&lt;br/&gt;測試了一下效能, 前三種實作方式, 感覺不出有太大的差異, 也就很難說誰優誰劣, 至於Go與javascript的比較, 如果是以&amp;quot;go run &amp;ldquo;的方式跟node.js來比, node.js高出甚多, 可能&amp;quot;go run&amp;quot;還是需要經過編譯階段, 但如果先以&amp;quot;go build&amp;quot;編譯成原生碼(native code), go的效能就高出甚多了, 不過以這比較也不算準啦&amp;hellip;. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/POcYPv"&gt;http://bit.ly/POcYPv&lt;/a&gt;&lt;/p&gt;</description></item><item><title>在node.js使用underscore.js</title><link>https://blog.jln.co/%E5%9C%A8node.js%E4%BD%BF%E7%94%A8underscore.js/</link><pubDate>Tue, 09 Oct 2012 06:39:53 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E5%9C%A8node.js%E4%BD%BF%E7%94%A8underscore.js/</guid><description>太早起床,只好隨便研究點東西 :P&lt;br/&gt;  &lt;br/&gt;&lt;a href="http://bit.ly/R10QWB"&gt;underscore.js&lt;/a&gt;對javascript來說是一個蠻好用的工具, 在前端應用程式的開發中也很常被利用到,但同樣以javascript為基礎開發的node.js, 能否直接使用underscore.js呢?&lt;br/&gt;&lt;br/&gt;嘗試以下面的程式碼用node.js跑:&lt;br/&gt;&lt;br/&gt;&lt;pre class="prettyprint lang-js"&gt;require('./underscore.js'); &lt;br/&gt;&lt;br/&gt;var a = [1, 23, 6, 11, 25, 12, 33, 11, 4];&lt;br/&gt;&lt;br/&gt; _.forEach(a, function(v) {&lt;br/&gt; console.log(v);&lt;br/&gt;});&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;執行結果會得到&lt;i&gt;&lt;b&gt;&amp;ldquo;ReferenceError: _ is not defined&amp;rdquo; &lt;/b&gt;&lt;/i&gt;&lt;br/&gt;打開underscore.js的原始碼一看, 發現了這一段, 其實它是有針對node.js做手腳的:&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;pre class="prettyprint lang-js"&gt;// Export the Underscore object for **Node.js**, with&lt;br/&gt;// backwards-compatibility for the old `require()` API. If we're in&lt;br/&gt;// the browser, add `_` as a global object via a string identifier, &lt;br/&gt;// for Closure Compiler "advanced" mode.&lt;br/&gt;if (typeof exports !== 'undefined') {&lt;br/&gt; if (typeof module !== 'undefined' &amp;amp;&amp;amp; module.exports) {&lt;br/&gt; exports = module.exports = _;&lt;br/&gt; }&lt;br/&gt; exports._ = _;&lt;br/&gt; } else {&lt;br/&gt; root['_'] = _;&lt;br/&gt; } &lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;也就是, 在browser時, &amp;ldquo;_&amp;quot;是一個global object, 但在node.js則不是, 原本的範例如果改成這樣就可以了:&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;pre class="prettyprint lang-js"&gt;var _us = require('./underscore.js'); &lt;br/&gt;&lt;br/&gt;var a = [1, 23, 6, 11, 25, 12, 33, 11, 4];&lt;br/&gt;&lt;br/&gt; _us.forEach(a, function(v) {&lt;br/&gt; console.log(v);&lt;br/&gt;});&lt;br/&gt;&lt;/pre&gt;&lt;br/&gt;&lt;br/&gt;這樣一來, 前後端也可以共用同一份underscore.js了&lt;br/&gt;&lt;br/&gt;補充: 類似的工具還有&lt;a href="http://bit.ly/tq8zi7"&gt;async&lt;/a&gt;這個, 也是前後端都可以應用 &lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/R10QWD"&gt;http://bit.ly/R10QWD&lt;/a&gt;</description></item><item><title>一些小想法 10/4</title><link>https://blog.jln.co/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%83%B3%E6%B3%95-10/4/</link><pubDate>Thu, 04 Oct 2012 10:36:08 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E4%B8%80%E4%BA%9B%E5%B0%8F%E6%83%B3%E6%B3%95-10/4/</guid><description>&lt;p&gt;趁著等車時寫一下昨天搭車時想到的一些東西&lt;br/&gt;&lt;br/&gt;今年參加了好幾個國內外的hackthon，收穫還算不少，覺得，很多developers都有很多不錯且創新的想法，但實際上，大部份的工作場，除了以developers為主體的公司外，大部份的developers處的角色都是執行者，這些＂想法＂反而往往在工作場合不會出現或被埋沒，這讓我想到＂Effective Programming&amp;quot;裡提到的＂developers大多不善於表達＂！&lt;br/&gt;&lt;br/&gt; 這倒很難辯駁的，這一行，包含我自己，不用說不懂的做美美的簡報、炫麗的demo，連把一個簡單的觀念傳達給別人都可能要花上大把時間，尤其是傳達給非技術相關的，developers的思考模式大多是非線性的、跳tone的，強一點的根本就是multi cores，而且，都是沒耐性的，所以往往傳達給別人的，大多不到本意的六成，被瞭解的大概又只剩這一半&lt;br/&gt;&lt;br/&gt;Hackthon算是一種不錯的訓練，訓練人在短時間團隊合作並傳達更多有趣的想法，雖然我不是很喜歡那些藉這種場合宣傳自己產品的，畢竟他們的產物不是在當下產生的，不過也是很多有趣的startup就這麼興起的&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Android] GCM可以怎麼用?</title><link>https://blog.jln.co/Android-GCM%E5%8F%AF%E4%BB%A5%E6%80%8E%E9%BA%BC%E7%94%A8/</link><pubDate>Sat, 08 Sep 2012 00:21:43 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-GCM%E5%8F%AF%E4%BB%A5%E6%80%8E%E9%BA%BC%E7%94%A8/</guid><description>GCM的前身就是所謂的C2DM, 最早在今年Google I/O時聽到C2DM將進化到GCM時, 就在想, 一定要架個server才可以利用GCM嗎?&lt;br/&gt;&lt;br/&gt;其實是可以不用的&lt;br/&gt;&lt;br/&gt;&lt;div class="separator" style="clear: both; text-align: center;"&gt;&lt;a href="http://bit.ly/Ngg8t2" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"&gt;&lt;img border="0" height="104" src="http://bit.ly/Q9qUPv" width="320"/&gt;&lt;/a&gt;&lt;/div&gt;從API console可知, 是可以設定允許從任意IP傳送的&lt;br/&gt;&lt;br/&gt;再來看看一般的流程:&lt;br/&gt;1. Regster:&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;pre class="prettyprint pretty-java"&gt;&lt;span class="typ"&gt;GCMRegistrar&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;checkDevice&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="kwd"&gt;this&lt;/span&gt;&lt;span class="pun"&gt;);&lt;/span&gt;&lt;span class="pln"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="typ"&gt;GCMRegistrar&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;checkManifest&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="kwd"&gt;this&lt;/span&gt;&lt;span class="pun"&gt;);&lt;/span&gt;&lt;span class="pln"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="kwd"&gt;final&lt;/span&gt;&lt;span class="pln"&gt; &lt;/span&gt;&lt;span class="typ"&gt;String&lt;/span&gt;&lt;span class="pln"&gt; regId &lt;/span&gt;&lt;span class="pun"&gt;=&lt;/span&gt;&lt;span class="pln"&gt; &lt;/span&gt;&lt;b&gt;&lt;span class="typ"&gt;GCMRegistrar&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;getRegistrationId&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="kwd"&gt;this&lt;/span&gt;&lt;span class="pun"&gt;);&lt;/span&gt;&lt;/b&gt;&lt;span class="pln"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="kwd"&gt;if&lt;/span&gt;&lt;span class="pln"&gt; &lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="pln"&gt;regId&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;equals&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="str"&gt;""&lt;/span&gt;&lt;span class="pun"&gt;))&lt;/span&gt;&lt;span class="pln"&gt; &lt;/span&gt;&lt;span class="pun"&gt;{&lt;/span&gt;&lt;span class="pln"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="typ"&gt;GCMRegistrar&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="kwd"&gt;register&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="kwd"&gt;this&lt;/span&gt;&lt;span class="pun"&gt;,&lt;/span&gt;&lt;span class="pln"&gt; SENDER_ID&lt;/span&gt;&lt;span class="pun"&gt;);&lt;/span&gt;&lt;span class="pln"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="pun"&gt;}&lt;/span&gt;&lt;span class="pln"&gt; &lt;/span&gt;&lt;span class="kwd"&gt;else&lt;/span&gt;&lt;span class="pln"&gt; &lt;/span&gt;&lt;span class="pun"&gt;{&lt;/span&gt;&lt;span class="pln"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="typ"&gt;Log&lt;/span&gt;&lt;span class="pun"&gt;.&lt;/span&gt;&lt;span class="pln"&gt;v&lt;/span&gt;&lt;span class="pun"&gt;(&lt;/span&gt;&lt;span class="pln"&gt;TAG&lt;/span&gt;&lt;span class="pun"&gt;,&lt;/span&gt;&lt;span class="pln"&gt; &lt;/span&gt;&lt;span class="str"&gt;"Already registered"&lt;/span&gt;&lt;span class="pun"&gt;);&lt;/span&gt;&lt;span class="pln"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="pun"&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/blockquote&gt;2. 取得Registration ID後將ID送至Server &lt;br/&gt;3. Server之後可以用這ID送訊息給這一支手機&lt;br/&gt;&lt;br/&gt;由&amp;quot;2&amp;quot;看來, 其實Registration ID是關鍵, 而不是Server, 任何人只要有Registration ID, 就可以傳送訊息給這隻手機了&lt;br/&gt;&lt;br/&gt;做了個小小實驗, 寫了一支Activity同時具備了收訊息以及傳送(給自己)的能力:&lt;br/&gt;&lt;a href="http://bit.ly/Nggb8b"&gt;&lt;br/&gt;&lt;/a&gt;&lt;a href="http://bit.ly/Q9qSag"&gt;http://bit.ly/Q9qSag&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;想到的應用: 兩隻手機透過條碼或藍牙交換Registration ID, 就可以透過GCM互傳訊息了&lt;br/&gt;&lt;br/&gt;缺點: Registration ID如果有變(GCM是有可能更換ID), 就失效了&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/Q9qSai"&gt;http://bit.ly/Q9qSai&lt;/a&gt;</description></item><item><title>[Android] 如何知道使用者是否已移除你的程式</title><link>https://blog.jln.co/Android-%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%BF%E7%94%A8%E8%80%85%E6%98%AF%E5%90%A6%E5%B7%B2%E7%A7%BB%E9%99%A4%E4%BD%A0%E7%9A%84%E7%A8%8B%E5%BC%8F/</link><pubDate>Fri, 07 Sep 2012 15:31:43 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-%E5%A6%82%E4%BD%95%E7%9F%A5%E9%81%93%E4%BD%BF%E7%94%A8%E8%80%85%E6%98%AF%E5%90%A6%E5%B7%B2%E7%A7%BB%E9%99%A4%E4%BD%A0%E7%9A%84%E7%A8%8B%E5%BC%8F/</guid><description>&lt;p&gt;這問題我原先是在Stack overflow看到的:&lt;br/&gt;&lt;br/&gt;&lt;a href="http://bit.ly/PNSz84"&gt;http://bit.ly/PNSz84&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;我也提供了一個解法, 不過, 慚愧的是, 我當初突然想到這解法後, 自己並沒有去實驗它, 只是覺得理論上可行&amp;hellip; :P&lt;br/&gt;&lt;br/&gt;我的方法是, 利用&lt;a href="http://bit.ly/PNSyku"&gt;GCM (Google Cloud Messaging)&lt;/a&gt;, 裡面有一段:&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[筆記] 2012 9月第一週</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98-2012-9%E6%9C%88%E7%AC%AC%E4%B8%80%E9%80%B1/</link><pubDate>Mon, 03 Sep 2012 01:05:41 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98-2012-9%E6%9C%88%E7%AC%AC%E4%B8%80%E9%80%B1/</guid><description>這禮拜想到的東西真有點雜, 標題只好隨便下, 本來這週給自己要求的進度應該要再多一點, 結果最後只為了node for Android加了Android log的機制&lt;br/&gt;&lt;br/&gt;&lt;h3&gt;&lt;b&gt;node for Android&lt;/b&gt;&lt;/h3&gt;這週本來預定的目標是串接上NativeActivity, 不過, 沒做到, 需要多花點時間想切入點:&lt;br/&gt;&lt;ol&gt;&lt;li&gt;pass &amp;ldquo;struct android_app *&amp;rdquo; to Node (從android_main呼叫新的node::Start)&lt;/li&gt;&lt;li&gt;wrap &amp;ldquo;struct android_app *&amp;rdquo; (是否要依附在process object? 參考資料: node_object_wrap.h, v8::Object::SetPointerInInternalField)&lt;/li&gt;&lt;li&gt;Design of callbacks for AppCmd, InputEvent (NativeActivity &amp;ndash;&amp;gt; Node)&lt;/li&gt;&lt;/ol&gt;這邊有點頭痛, 要找到一個比較好的切入點設計一個新的架構給NativeActivity, 不過這邊又回頭想了一個問題, 到底Node適不適合UI programming, 還是當做一個server, 掛到一個Android service會比較適合?&lt;br/&gt;&lt;br/&gt;adding native module to Node:&lt;br/&gt;為了練習這部份, 把android log的機制加進去, 完成後可以在js裡用下面這樣叫用Android log&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;require(&amp;lsquo;android&amp;rsquo;);&lt;/i&gt;&lt;br/&gt;&lt;i&gt;alog.d('tag&amp;rsquo;, 'message1&amp;rsquo;); //debug log&lt;/i&gt;&lt;br/&gt;&lt;i&gt;alog.e('tag&amp;rsquo;, 'var a=&amp;rsquo;, a, &amp;rsquo; found&amp;rsquo;, 1, 'error&amp;rsquo;); //error log&lt;/i&gt;&lt;/blockquote&gt;由這code看, 主要有兩個部分, 一個是一個名為android的module, 一個是alog這個global object (Node本身已有&amp;quot;log&amp;quot;, 為避免衝突, 改名為alog)&lt;br/&gt;&lt;br/&gt;新增module的參考資料為: &lt;a href="http://bit.ly/RzIQWl"&gt;http://bit.ly/RzIQWl &lt;/a&gt;, 不過, 這邊加的不是addon而是一個native module, 所以有點不同, 首先為了這個module新增了, node_android.cc (class Android), 名字一定要是&amp;quot;node_&amp;ldquo;開頭 , 這是由於binding時, 會尋找&amp;quot;node_&amp;quot;開頭的module (參考 node_extensions.cc : get_builtin_module), 這邊主要implement的是用&amp;quot;NODE_SET_METHOD&amp;quot;加入新的method &amp;quot;log&amp;rdquo;, 用&amp;quot;NODE_DEFINE_CONSTANT&amp;quot;映射了幾個log level的常數, 最後用&amp;quot;NODE_MODULE&amp;quot;定義module的init method&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;Source code: &lt;a href="http://bit.ly/RzIOxD"&gt;http://bit.ly/RzIOxD&lt;/a&gt;&lt;/blockquote&gt;不過這樣不夠, 因為我要的不是只有&amp;quot;log&amp;quot;, 而是要像&amp;quot;alog.d&amp;quot;這樣的東西, 因此又多了一個android.js來處理:&lt;br/&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;div class="line" id="LC1"&gt;&lt;br/&gt;&lt;span class="kd"&gt; &lt;/span&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC1"&gt;&lt;br/&gt;&lt;i&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;binding&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;b style="color: red;"&gt;&lt;span class="nx"&gt;process&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'android'&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/b&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC2"&gt;&lt;br/&gt;&lt;i&gt;&lt;br/&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC3"&gt;&lt;br/&gt;&lt;i&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC4"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC5"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC6"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;objs&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[];&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC7"&gt;&lt;br/&gt;&lt;i&gt;&lt;br/&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC8"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC9"&gt;&lt;br/&gt;&lt;i&gt;       &lt;span class="nx"&gt;objs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;args&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC10"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC11"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;objs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;' '&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC12"&gt;&lt;br/&gt;&lt;i&gt;&lt;br/&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC13"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;level&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tag&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC14"&gt;&lt;br/&gt;&lt;i&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC15"&gt;&lt;br/&gt;&lt;i&gt;&lt;br/&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC16"&gt;&lt;br/&gt;&lt;i&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;alog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC17"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="nx"&gt;v&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC18"&gt;&lt;br/&gt;&lt;i&gt;        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;b&gt;&lt;span class="nx" style="color: red;"&gt;binding&lt;/span&gt;&lt;span class="p" style="color: red;"&gt;.&lt;/span&gt;&lt;span class="nx" style="color: red;"&gt;ANDROID_LOG_VERBOSE&lt;/span&gt;&lt;/b&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC19"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC20"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="nx"&gt;d&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC21"&gt;&lt;br/&gt;&lt;i&gt;        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ANDROID_LOG_DEBUG&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC22"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC23"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC24"&gt;&lt;br/&gt;&lt;i&gt;        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ANDROID_LOG_INFO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC25"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC26"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="nx"&gt;w&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC27"&gt;&lt;br/&gt;&lt;i&gt;        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ANDROID_LOG_WARN&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC28"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="p"&gt;},&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC29"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC30"&gt;&lt;br/&gt;&lt;i&gt;        &lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;binding&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ANDROID_LOG_ERROR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;arguments&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC31"&gt;&lt;br/&gt;&lt;i&gt;    &lt;span class="p"&gt;}&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC32"&gt;&lt;br/&gt;&lt;i&gt;&lt;span class="p"&gt;};&lt;/span&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC33"&gt;&lt;br/&gt;&lt;i&gt;&lt;br/&gt;&lt;/i&gt;&lt;/div&gt;&lt;br/&gt;&lt;div class="line" id="LC34" style="color: red;"&gt;&lt;br/&gt;&lt;b&gt;&lt;i&gt;&lt;span class="nx"&gt;global&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;alog&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;alog&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;/i&gt;&lt;/b&gt;&lt;/div&gt;&lt;br/&gt;&lt;/pre&gt;&lt;/div&gt;&lt;br/&gt;&lt;br style="clear: both;"/&gt;&lt;br/&gt;首先用了process.binding來bind剛剛native的部份, 另為就是把alog變成global object&lt;br/&gt;&lt;br style="clear: both;"/&gt;&lt;br/&gt;&lt;h3&gt;其他TODO&lt;/h3&gt;Idea board, Bluetooth OPP&amp;hellip;.還沒想fb world hack做啥好&lt;br style="clear: both;"/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/RzIOxF"&gt;http://bit.ly/RzIOxF&lt;/a&gt;</description></item><item><title>Idea board : step 1</title><link>https://blog.jln.co/Idea-board-step-1/</link><pubDate>Sat, 01 Sep 2012 22:19:27 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Idea-board-step-1/</guid><description>&lt;div class="separator" style="clear: both; text-align: right;"&gt;&lt;a href="http://bit.ly/TIYEnj" target="_blank" style="margin-bottom: 1em; margin-left: 1em;"&gt;&lt;img src="http://bit.ly/T3mldY" id="blogsy-1346508697030.6052" class="" alt="" width="500" height="375"/&gt;&lt;/a&gt;&lt;/div&gt; 昨天晚上，突然開始在想一件事，怎樣把一堆ideas變成一些有用的東西？有些人有想法但力有未逮，有些人則有能力，用一個東西把這些串一起實現一些酷玩意兒，或許不錯 XD&lt;br/&gt;&lt;br/&gt; &lt;br/&gt;&lt;br/&gt;&lt;div style="text-align: right; font-size: small; clear: both;" id="blogsy_footer"&gt;&lt;a href="http://blogsyapp.com" target="_blank"&gt;&lt;img src="http://bit.ly/Nh8z1A" alt="在Blogsy發表的" style="vertical-align: middle; margin-right: 5px;" width="20" height="20"/&gt;在Blogsy發表的&lt;/a&gt;&lt;/div&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/T3mle0"&gt;http://bit.ly/T3mle0&lt;/a&gt;</description></item><item><title>node.js for Android</title><link>https://blog.jln.co/node.js-for-Android/</link><pubDate>Sun, 26 Aug 2012 22:21:11 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/node.js-for-Android/</guid><description>&lt;p&gt;這是我給自己練習NDK的作業,選擇node.js的原因是, 沒啥, 就只是覺得應該會蠻好玩的, 之前就有念頭想po, 加上node.js所需要的像是openssl, v8等等, 在Android上早就有了, 想說porting應該也不會有太大的困難吧, 應該也不用改太多code才對&lt;br/&gt;&lt;br/&gt;實際是,還是有點問題, 需要改些東西, ndk的build system可以說是原本Android的簡化版, 所以有些東西並沒有, 所以並不是把原本的Android.mk copy過來就沒問題了, 比如說v8, LOCAL_GENERATED_SOURCES, intermediates 這些東西雖然有在原本aosp的build system內, 但在NDK就完全不存在, 但由於v8和node都有需要把js lib轉成CPP一起build進去, 所以這時候就要借助這類的東西:&lt;br/&gt;&lt;i&gt;$(shell python $(JS2C_PY) $(GEN1) CORE off $(LOCAL_JS_LIBRARY_FILES))&lt;/i&gt;&lt;br/&gt;&lt;br/&gt;起初我並沒注意到js2c這部份, 結果最後link不過, 缺了一堆東西, trace之後才發現少這部份&lt;br/&gt;&lt;br/&gt;此外, 在uv的部份, 由於uv是node的native library的部份, 有一些OS相關的code, 但由於Andorid的bionic比起libc是算簡化版本, 有些API並不存在, 因此除了為android產生一些專屬的config.h (我從linux的版本去改的), 還要改一些code&lt;br/&gt;&lt;br/&gt;目前的進度是, 可以用ndk-r8b build出Android可用的可執行檔(還沒完全測過, 應該有些bug代解), 先全用static link的&lt;br/&gt;&lt;br/&gt;Source codes放在GitHub : &lt;a href="http://bit.ly/ODaijv"&gt;http://bit.ly/ODaijv&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;還有一些想做的還沒做:&lt;br/&gt;&lt;/p&gt;</description></item></channel></rss>