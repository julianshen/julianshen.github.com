<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Le murmure de Julian</title><link>https://blog.jln.co/tags/golang/</link><description>Recent content in Golang on Le murmure de Julian</description><generator>Hugo</generator><language>zh-tw</language><managingEditor>julianshen22@gmail.com (Julian Shen)</managingEditor><webMaster>julianshen22@gmail.com (Julian Shen)</webMaster><lastBuildDate>Sat, 01 Apr 2017 10:00:58 +0000</lastBuildDate><atom:link href="https://blog.jln.co/tags/golang/feed.xml" rel="self" type="application/rss+xml"/><item><title>[Golang] Go的httptest</title><link>https://blog.jln.co/Golang-Go%E7%9A%84httptest/</link><pubDate>Sat, 01 Apr 2017 10:00:58 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Golang-Go%E7%9A%84httptest/</guid><description>&lt;p&gt;在標準的go package中除了已經內建了http相關的實作外, 還有一個&lt;code&gt;net/http/httptest&lt;/code&gt;, 這的package是用來給寫http相關測試用的, 可分為測試http server (http handler)和http client的(提供mock server給client)&lt;/p&gt;</description></item><item><title>RSS for Ptt</title><link>https://blog.jln.co/RSS-for-Ptt/</link><pubDate>Wed, 01 Mar 2017 17:08:32 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/RSS-for-Ptt/</guid><description>&lt;p&gt;最近才發現, ptt的rss功能好像拿掉了, 這樣好像就不能拿feedly之類的來訂閱版面內容, 反正我自己有寫了一個&lt;a href="https://github.com/julianshen/gopttcrawler"&gt;gopttcrawler&lt;/a&gt;
所幸自己來寫一個吧!&lt;/p&gt;
&lt;p&gt;source code在: &lt;a href="https://github.com/julianshen/pttrss"&gt;pttrss&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[Go] Open graph parser</title><link>https://blog.jln.co/Go-Open-graph-parser/</link><pubDate>Tue, 24 Jan 2017 01:38:19 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-Open-graph-parser/</guid><description>&lt;p&gt;最近因為寫bot, 處理不少的HTML資料, 其中最常用的就是去取的&lt;a href="http://ogp.me/"&gt;Open Graph&lt;/a&gt;的內容,
取這部分的資料是做啥用呢? 現今, 多數的網頁已會用&lt;a href="http://ogp.me/"&gt;Open Graph&lt;/a&gt;和&lt;a href="https://dev.twitter.com/cards/overview"&gt;Twitter Card&lt;/a&gt;
來描述網頁的一些屬性, 比如說標題, 相關圖片, 關聯影片等等, 而不管是&lt;a href="http://ogp.me/"&gt;Open Graph&lt;/a&gt;還是&lt;a href="https://dev.twitter.com/cards/overview"&gt;Twitter Card&lt;/a&gt;
都以HTML的meta tags存在的, 像這樣:&lt;/p&gt;</description></item><item><title>[Go] 用Go抓PTT文章</title><link>https://blog.jln.co/Go-%E7%94%A8Go%E6%8A%93PTT%E6%96%87%E7%AB%A0/</link><pubDate>Thu, 19 Jan 2017 11:45:30 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-%E7%94%A8Go%E6%8A%93PTT%E6%96%87%E7%AB%A0/</guid><description>&lt;p&gt;好, 這算我以為我寫過但實際上沒有系列&amp;hellip;.啥? 剛剛把我以前寫的一個&lt;a href="https://github.com/julianshen/gopttcrawler"&gt;Go package - gopttcrawler&lt;/a&gt;更新後,
想說之前好像有寫過相關文章, 但實際上又沒找到(老了?)&lt;/p&gt;</description></item><item><title>[Go] 用Go寫line聊天機器人 - 新聞萬事通心得1</title><link>https://blog.jln.co/Go-%E7%94%A8Go%E5%AF%ABline%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA-%E6%96%B0%E8%81%9E%E8%90%AC%E4%BA%8B%E9%80%9A%E5%BF%83%E5%BE%971/</link><pubDate>Tue, 17 Jan 2017 20:17:16 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-%E7%94%A8Go%E5%AF%ABline%E8%81%8A%E5%A4%A9%E6%A9%9F%E5%99%A8%E4%BA%BA-%E6%96%B0%E8%81%9E%E8%90%AC%E4%BA%8B%E9%80%9A%E5%BF%83%E5%BE%971/</guid><description>&lt;p&gt;之前由於想說來玩一下實驗一下&lt;a href="https://devdocs.line.me/en/#getting-started"&gt;Line Messaging API&lt;/a&gt;, 就寫了一個叫做&lt;a href="https://line.me/R/ti/p/%40cur4648v"&gt;新聞萬事通&lt;/a&gt;的聊天機器人, 一來是實驗一下API, 二來就是想做一些好玩的東西&lt;/p&gt;
&lt;p&gt;加入新聞萬事通請按 :&lt;/p&gt;
&lt;p&gt;&lt;a href="https://line.me/R/ti/p/%40cur4648v"&gt;&lt;img src="http://qr-official.line.me/L/8J7Xfy_Tas.png" alt="加入好友"&gt; &lt;img src="https://scdn.line-apps.com/n/line_add_friends/btn/zh-Hant.png" alt="加入好友"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一開始的想法很簡單, 掃描聊天內容內有連結的, 去正宗的&lt;a href="http://newshelper.g0v.tw/"&gt;新聞小幫手&lt;/a&gt;查詢, 不過後來越玩越上癮, 就又加了一些功能, 幾個目前有的功能:&lt;/p&gt;</description></item><item><title>[Go] 利用goquery + otto來分析網頁</title><link>https://blog.jln.co/Go-%E5%88%A9%E7%94%A8goquery--otto%E4%BE%86%E5%88%86%E6%9E%90%E7%B6%B2%E9%A0%81/</link><pubDate>Sun, 01 Jan 2017 01:56:29 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-%E5%88%A9%E7%94%A8goquery--otto%E4%BE%86%E5%88%86%E6%9E%90%E7%B6%B2%E9%A0%81/</guid><description>&lt;p&gt;2017的第一篇blog就先又來回的go跟爬蟲了&lt;/p&gt;
&lt;p&gt;&lt;a href="https://github.com/PuerkitoBio/goquery"&gt;goquery&lt;/a&gt;在Go是像jquery一樣的存在, 可以讓你用jquery一樣的selector來解析html檔案內容, 像這樣:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"&gt;&lt;code class="language-go" data-lang="go"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#a6e22e"&gt;doc&lt;/span&gt;.&lt;span style="color:#a6e22e"&gt;Find&lt;/span&gt;(&lt;span style="color:#e6db74"&gt;&amp;#34;.sidebar-reviews article .content-block&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;只要有一些jquery的知識大概就不難上手, 但一般的網頁內容並不只有html這麼簡單而已, 有非常多的網頁是根本把資料給放在javascript, 在browser端再重組而成,
碰到這種, 光解析網頁原始檔是不夠的, 因為很多tag的內容都是之後被javascript所產生的&lt;/p&gt;</description></item><item><title>Rate limit with Go and Gin</title><link>https://blog.jln.co/Rate-limit-with-Go-and-Gin/</link><pubDate>Wed, 23 Nov 2016 12:05:38 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Rate-limit-with-Go-and-Gin/</guid><description>&lt;p&gt;昨天趁等著去面試前稍微把這之前想要寫一下的這題目打包成一個&lt;a href="https://github.com/gin-gonic/gin"&gt;Gin&lt;/a&gt;的middleware :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/julianshen/gin-limiter"&gt;Gin-limiter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Rate limiting 通常在很多開放API的服務內會常看到, 像是&lt;a href="https://dev.twitter.com/rest/public/rate-limiting"&gt;Twitter&lt;/a&gt;,
像是&lt;a href="https://developers.facebook.com/docs/graph-api/advanced/rate-limiting"&gt;Facebook&lt;/a&gt;或是&lt;a href="http://open.weibo.com/wiki/Rate-limiting"&gt;新浪微博&lt;/a&gt;,
其目的就是希望API不要被特定節點頻繁存取以致於造成伺服器端的過載&lt;/p&gt;</description></item><item><title>用Groupcache和etcd建置thumbnail服務</title><link>https://blog.jln.co/%E7%94%A8Groupcache%E5%92%8Cetcd%E5%BB%BA%E7%BD%AEthumbnail%E6%9C%8D%E5%8B%99/</link><pubDate>Fri, 11 Nov 2016 14:53:03 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%94%A8Groupcache%E5%92%8Cetcd%E5%BB%BA%E7%BD%AEthumbnail%E6%9C%8D%E5%8B%99/</guid><description>&lt;p&gt;在之前工作的時候, 做了一個專門用來產生thumbnail(縮圖)的服務, 當時這東西主要的目的是為了因應&lt;a href="http://www.zencircle.com"&gt;Zencircle&lt;/a&gt;會有不同尺寸的縮圖的需求,
而且每次client app改版又可能多新的尺寸, 因此當時寫了這個叫Minami的服務, 當時幾個簡單的需求是:&lt;/p&gt;</description></item><item><title>一些做爬蟲的工具與方法</title><link>https://blog.jln.co/%E4%B8%80%E4%BA%9B%E5%81%9A%E7%88%AC%E8%9F%B2%E7%9A%84%E5%B7%A5%E5%85%B7%E8%88%87%E6%96%B9%E6%B3%95/</link><pubDate>Tue, 04 Oct 2016 23:41:22 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E4%B8%80%E4%BA%9B%E5%81%9A%E7%88%AC%E8%9F%B2%E7%9A%84%E5%B7%A5%E5%85%B7%E8%88%87%E6%96%B9%E6%B3%95/</guid><description>&lt;p&gt;之前寫了一些爬蟲, 想說來補一篇這樣的文章好了&lt;/p&gt;
&lt;p&gt;可能是之前&amp;quot;所謂&amp;quot;的大數據(Big Data)太過流行, 以至於網路爬蟲好像是一種顯學, 隨便Google一下都可以找到一堆用python加上&lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#"&gt;BeautifulSoup&lt;/a&gt;
相關的文章, 這可能也是因為, 現在網路上的資料, Open data的, 提供API的, 在比例上還是非常的少數, 但網頁的數量真的多到很難統計(想到早期還真是屈指可數)
要取得網頁內的內容, 解析HTML, 做字串的處理就是一個必要的基礎, 這也難怪python + &lt;a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/#"&gt;BeautifulSoup&lt;/a&gt;
一直廣泛的被採用&lt;/p&gt;</description></item><item><title>使用AWS lambda和Github來提供中華職棒賽程資料</title><link>https://blog.jln.co/%E4%BD%BF%E7%94%A8AWS-lambda%E5%92%8CGithub%E4%BE%86%E6%8F%90%E4%BE%9B%E4%B8%AD%E8%8F%AF%E8%81%B7%E6%A3%92%E8%B3%BD%E7%A8%8B%E8%B3%87%E6%96%99/</link><pubDate>Wed, 28 Sep 2016 02:17:12 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E4%BD%BF%E7%94%A8AWS-lambda%E5%92%8CGithub%E4%BE%86%E6%8F%90%E4%BE%9B%E4%B8%AD%E8%8F%AF%E8%81%B7%E6%A3%92%E8%B3%BD%E7%A8%8B%E8%B3%87%E6%96%99/</guid><description>&lt;p&gt;不知不覺的突然就多出了兩天颱風假, 這颱風實在很威, 乒乒乓乓的, 不過, 也沒做什麼, 時間就快過完了, 現在才想到, 還是來寫點什麼, 嚴格說來這些東西並不完全是颱風假時弄的, 只是拖得有點久&lt;/p&gt;</description></item><item><title>[Golang] 一個簡單的Mongo db proxy</title><link>https://blog.jln.co/Golang-%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84Mongo-db-proxy/</link><pubDate>Sun, 19 Jun 2016 13:17:04 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Golang-%E4%B8%80%E5%80%8B%E7%B0%A1%E5%96%AE%E7%9A%84Mongo-db-proxy/</guid><description>&lt;p&gt;之前被Parse搞的半死, 一直很好奇它的API到Mongodb的request之間到底是怎樣的對應&lt;/p&gt;
&lt;p&gt;要弄清楚這個其實也不難, 把Mongodb的profiler全打開去看log就好了(&lt;code&gt;db.setProfilingLevel(2)&lt;/code&gt;), 但這也是有缺點, profiler會寫到&lt;code&gt;system.profile&lt;/code&gt;這個collection去, 而它是固定大小, 不能無限制的放, 再加上它還要多寫入這段, 多多少少影響效能&lt;/p&gt;</description></item><item><title>[Golang] Streaming JSON Parser in Go</title><link>https://blog.jln.co/Golang-Streaming-JSON-Parser-in-Go/</link><pubDate>Sun, 13 Sep 2015 16:55:55 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Golang-Streaming-JSON-Parser-in-Go/</guid><description>&lt;p&gt;目前Json已經可以說是Internet上相當流行的格式了, 雖然說他缺點還算蠻多的, 但很多主流的程式語言都有成熟的parser可供使用,  在Golang則可利用內建的encoding/json這個package來達成&lt;/p&gt;</description></item><item><title>使用Go產生動態gif</title><link>https://blog.jln.co/%E4%BD%BF%E7%94%A8Go%E7%94%A2%E7%94%9F%E5%8B%95%E6%85%8Bgif/</link><pubDate>Sun, 06 Sep 2015 22:45:37 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E4%BD%BF%E7%94%A8Go%E7%94%A2%E7%94%9F%E5%8B%95%E6%85%8Bgif/</guid><description>&lt;p&gt;最近在嘗試寫一些動態gif的應用, 所以就研究了一下怎用go去產生動態gif, 後來找到以下這篇:&lt;/p&gt;&lt;blockquote&gt;&lt;p&gt;&lt;a href="http://shogo82148.github.io/blog/2015/04/25/quantize-image-in-golang/"&gt;&lt;b&gt;Go言語で画像の減色を行う&lt;/b&gt;&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;&lt;p&gt;其實這篇已經寫的蠻完整的了, 不過由它是日文(有很多日文的技術文章其實還不錯), 所以我嘗試用我自己的方法用中文再闡釋一遍&lt;/p&gt;</description></item><item><title>goticon - An implementation of Indenticon in golang</title><link>https://blog.jln.co/goticon-An-implementation-of-Indenticon-in-golang/</link><pubDate>Tue, 01 Sep 2015 21:01:15 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/goticon-An-implementation-of-Indenticon-in-golang/</guid><description>&lt;p&gt;會寫這東西, 起因是上週跟同事聊到, 在social network上, 尤其是我們自己的ㄍservice, 似乎很多人不習慣或是會沒設大頭照, 如果有一個可以自動產生不同的大頭照的服務, 應該會不錯, 所以就用週末寫了這個小程式, 先給兒子試玩了一下, 他對改個東西就能產生變化還頗有興趣的, 以後再來教他寫, 哈 
&lt;/p&gt;</description></item><item><title>[Go筆記] UUID package</title><link>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-UUID-package/</link><pubDate>Tue, 13 Nov 2012 23:52:30 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-UUID-package/</guid><description>&lt;p&gt;自己想做的東西可能需要一個&lt;a href="http://bit.ly/X3vXZH"&gt;UUID&lt;/a&gt;的產生器, 找了一下既有的packages跟網路上的, 好像沒一個自己滿意的, 所以就自己從&lt;a href="http://bit.ly/SJP6bZ"&gt;java.util.UUID&lt;/a&gt; po過來&lt;br/&gt;&lt;br/&gt;Source在此: &lt;a href="http://bit.ly/X3w0V7"&gt;http://bit.ly/X3w0V7&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;目前只implement&lt;a href="http://bit.ly/X3vZAx"&gt; RFC 4122&lt;/a&gt; Version 4&lt;br/&gt;&lt;br/&gt;Sample:&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/SJP43I"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/X3w0Vb"&gt;http://bit.ly/X3w0Vb&lt;/a&gt;&lt;/p&gt;</description></item><item><title>[Go筆記] Go on GAE: 比"Hello World"多一點點: 處理static files</title><link>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-Go-on-GAE-%E6%AF%94Hello-World%E5%A4%9A%E4%B8%80%E9%BB%9E%E9%BB%9E-%E8%99%95%E7%90%86static-files/</link><pubDate>Thu, 25 Oct 2012 00:18:23 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-Go-on-GAE-%E6%AF%94Hello-World%E5%A4%9A%E4%B8%80%E9%BB%9E%E9%BB%9E-%E8%99%95%E7%90%86static-files/</guid><description>&lt;p&gt;今天被問到Go適合用在哪方面, 至今只看了Go兩個晚上的我, 實在很難回答這問題, 先從FAQ找來創立Go的目的說起:&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;&lt;blockquote class="tr_bq"&gt;&lt;i&gt;&lt;span style="color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 16px;"&gt;&amp;ldquo;Go is an attempt to combine the ease of programming of an interpreted, dynamically typed language with the efficiency and safety of a statically typed, compiled language. It also aims to be modern, with support for networked and multicore computing. Finally, it is intended to be &lt;/span&gt;&lt;span style="color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 16px;"&gt;fast&lt;/span&gt;&lt;span style="color: #222222; font-family: Helvetica, Arial, sans-serif; font-size: 16px;"&gt;: it should take at most a few seconds to build a large executable on a single computer. To meet these goals required addressing a number of linguistic issues: an expressive but lightweight type system; concurrency and garbage collection; rigid dependency specification; and so on. These cannot be addressed well by libraries or tools; a new language was called for.&amp;rdquo;&lt;/span&gt;&lt;/i&gt;&lt;/blockquote&gt;簡而言之, Go的目標是一個簡單又有效率的語言, 加上一開始設計就考慮網路以及多核, 就姑且說它適合server端的開發吧&lt;br/&gt;&lt;br/&gt;事實上, GAE(Google AppEngine)也是有支援Go的 (怎麼說呢, 好歹這也是Google自己親生的呀)&lt;br/&gt;&lt;br/&gt;那, 現在開發server端的工具那麼多種, 有什麼樣的理由是選Go優於其他解決方案呢? 以效率來說, 或許比較好吧, 既然它是原生碼, 應該會快一些吧, 但這也沒啥好的benchmark來佐證, 劣勢呢? 以node.js來相比好了(今年看比較多這個, 直覺拿這來做比較), 它不但沒既有的developer做基礎(既有的javascript developer是很大一群的), 也沒有數量很多且快速增長的第三方模組可供利用(雖然, 盲目用npm上的模組, 某種程度上要承擔一定的風險), 最大的問題就是&amp;hellip;.&lt;b&gt;&amp;ldquo;文件&amp;rdquo;&lt;/b&gt;&lt;br/&gt;&lt;br/&gt;以上前半段是抱怨文, 不過文件不足也沒辦法當啥藉口, 這年頭&amp;hellip;.&amp;ldquo;做就對了&amp;rdquo;&amp;hellip;..GAE上關於Go的文件也不是沒有, 跟著做, 就可以做出&amp;quot;Hello World&amp;quot;了, 但剛做完後, 突然楞住想&amp;hellip;.那&amp;hellip;我的html檔案放哪裡? 我總不能每個文件都寫在程式內, 總會有靜態檔案的呀! 有點讓我回到十幾年前寫CGI的感覺&lt;br/&gt;&lt;br/&gt;GAE的文件還真找不到, 但在Go的文件&lt;a href="http://bit.ly/SticN6"&gt;http.FileServer的範例&lt;/a&gt;可以找到解答, 但要把&amp;quot;FileServer&amp;quot;這個interface跟這件事聯想在一起還真有點不容易, 不過反正就是在程式內要加入下面這行來處理靜態檔案&lt;br/&gt;&lt;br/&gt;&lt;blockquote class="tr_bq"&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;http&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;.&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;Handle&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;(&lt;/span&gt;&lt;span class="s" style="background-color: white; border: 0px; color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;&amp;ldquo;/&amp;rdquo;&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;,&lt;/span&gt;&lt;span style="background-color: white; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; white-space: pre;"&gt; &lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;http&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;.&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;FileServer&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;(&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;http&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;.&lt;/span&gt;&lt;span class="n" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;Dir&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;(&lt;/span&gt;&lt;span class="s" style="background-color: white; border: 0px; color: #dd1144; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;&amp;ldquo;./static&amp;rdquo;&lt;/span&gt;&lt;span class="p" style="background-color: white; border: 0px; color: #333333; font-family: Consolas, 'Liberation Mono', Courier, monospace; line-height: 16px; margin: 0px; padding: 0px; white-space: pre;"&gt;)))&lt;/span&gt;&lt;/blockquote&gt;這範例讓你可以把靜態檔案放在&amp;quot;static&amp;quot;目錄下, 假設你在static目錄下放一個a.html, 那這行的目的就是可以讓你用 http://your_app_host/a.html來存取它&lt;br/&gt;&lt;br/&gt;我起始一個範例&lt;a href="http://bit.ly/StibZC"&gt;放在github上&lt;/a&gt;, 從這可以看完整的目錄結構, 未來相關範例也會放在這邊&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/SixshC"&gt;http://bit.ly/SixshC&lt;/a&gt;</description></item><item><title>[Go筆記] defer</title><link>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-defer/</link><pubDate>Wed, 24 Oct 2012 13:19:52 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go%E7%AD%86%E8%A8%98-defer/</guid><description>&lt;p&gt;Go沒有exception handling這樣的設計, 所以沒有像java裡的try{} catch{} finally{&amp;hellip;}這種東西, 在java裡, 我們會用&lt;br/&gt;&lt;br/&gt;&lt;/p&gt;</description></item><item><title>[Go] Do not communicate by sharing memory; instead, share memory by communicating.</title><link>https://blog.jln.co/Go-Do-not-communicate-by-sharing-memory-instead-share-memory-by-communicating./</link><pubDate>Wed, 24 Oct 2012 01:25:12 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-Do-not-communicate-by-sharing-memory-instead-share-memory-by-communicating./</guid><description>&lt;blockquote class="tr_bq"&gt;Do not communicate by sharing memory; instead, share memory by communicating.  &lt;/blockquote&gt;這是在Go的concurrent programming裡一個很重要的精神, concurrent programming也是Go裡面一個相當重要的部份, 它已是語言本身的一部分&lt;br/&gt;&lt;br/&gt;&amp;ldquo;channel&amp;rdquo; 也就是這精神下的產物, channel可以說是多個thread之間溝通的工具, 有點像是&amp;quot;pipe&amp;quot;但又有點肩負多執行緒間synchronization的責任, 下面實作了一個concurrent merge sort (我想這例子蠻適合的)&lt;br/&gt;&lt;br/&gt;&lt;script src="http://bit.ly/T8STOo"&gt;&lt;/script&gt;&lt;br/&gt;&lt;br/&gt;&amp;ldquo;go&amp;quot;這個修飾字用來啟用一個goroutines, goroutine可以視為一個輕量的執行緒(lightware thread), 在這用了一個內容是整數陣列的channel: chan []int, channel必須要先用&amp;quot;make&amp;quot;初始化&lt;br/&gt;&lt;br/&gt;由於使用了&amp;rdquo;&lt;span class="k"&gt;go&lt;/span&gt; &lt;span class="n"&gt;MergeSort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;middle&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;leftChan&lt;/span&gt;&lt;span class="p"&gt;)&amp;ldquo;, 因此, 左右兩邊的merge sort是同時進行的, 直到兩邊都結束後才會執行&amp;quot;merge&amp;quot;的動作, 但用了&amp;quot;go&amp;quot;啟用了執行緒, 連續這兩行是不會卡住(block)等結果的, 那怎確定兩個執行緒都真的結束後才執行merge的動作? 這其中就是透過channel來做同步化的動作, &amp;rdquo;&lt;/span&gt;&lt;span class="n"&gt;ldata&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;-&lt;/span&gt;&lt;span class="n"&gt;leftChan&amp;quot;, 這一段是將leftChan這個channel的結果指定到ldata, 如果leftChan一直沒輸入(input)進來, 這一行就會等在這, 直到左邊的MergeSort執行到Merge結束後(r&amp;lt;-)&lt;/span&gt;&lt;br/&gt;&lt;span class="n"&gt;&lt;br/&gt;&lt;/span&gt;&lt;span class="n"&gt;主程式也是叫起一個執行緒做MergeSort的動作, 等到結果產生才將結果印出, 整個不是很難懂, 但這思維還有點難調整(對我來說)&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/VA5n9P"&gt;http://bit.ly/VA5n9P&lt;/a&gt;</description></item><item><title>[Go] Go語言中的Closure</title><link>https://blog.jln.co/Go-Go%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84Closure/</link><pubDate>Tue, 23 Oct 2012 20:26:45 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Go-Go%E8%AA%9E%E8%A8%80%E4%B8%AD%E7%9A%84Closure/</guid><description>&lt;p&gt;我不太懂closure, 不懂的程度大概是我在用它的時候也沒有意識到我在用, 也沒玩過Go, 不過昨晚心血來潮的開始想用它來寫一些東西, 研究了一下, 發現它&amp;hellip;挺有趣的, 尤其是concurrent的部份, 以及讓我重新檢視了一下closure這部份&lt;br/&gt;&lt;br/&gt;在Go裡, function是可以像在javascript中一樣, 被指定到一個變數來使用:&lt;br/&gt;&lt;script src="http://bit.ly/RicXAa"&gt;&lt;/script&gt;&lt;br/&gt;上面兩個範例, 一個是把函式指定給一個變數, 一個是來當做回傳值, 這也是Go的closure大致上的形態, 在Go Tour的&lt;a href="http://bit.ly/POcY1X"&gt;第48頁的作業&lt;/a&gt;, 便是要求利用closure來完成Fibonacci數列的計算, 我們所熟知的Fibonacci數列(0, 1, 1, 2, 3, 5, 8 &amp;hellip; f(n) = f(n-1) + f(n-2))可以用iterative或recursive的方式來求解(&lt;a href="http://bit.ly/RicZbe"&gt;範例&lt;/a&gt;), 當然使用Go其實也可以採用這兩種方式: &lt;br/&gt;&lt;br/&gt;&lt;b&gt;&lt;i&gt;Iterative solution: &lt;/i&gt;&lt;/b&gt;&lt;br/&gt;&lt;script src="http://bit.ly/POcYPr"&gt;&lt;/script&gt;&lt;b&gt;&lt;i&gt;Recursive solution: &lt;/i&gt;&lt;/b&gt;&lt;br/&gt;&lt;script src="http://bit.ly/RicZbg"&gt;&lt;/script&gt; 如果單以公式看, Recursive solution是比較容易被理解的, 不過也比較有stack overflow的風險, 當然, 照這練習題的要求, 以上兩者都不滿足, 那改用closure來實作又是怎樣? &lt;br/&gt;&lt;script src="http://bit.ly/POcYPt"&gt;&lt;/script&gt; 整體上還算蠻簡潔的, 既然closure在javascript也很常被利用, 這邊放一個javascript的版本做一下比較: &lt;br/&gt;&lt;script src="http://bit.ly/RicZbi"&gt;&lt;/script&gt;&lt;br/&gt;測試了一下效能, 前三種實作方式, 感覺不出有太大的差異, 也就很難說誰優誰劣, 至於Go與javascript的比較, 如果是以&amp;quot;go run &amp;ldquo;的方式跟node.js來比, node.js高出甚多, 可能&amp;quot;go run&amp;quot;還是需要經過編譯階段, 但如果先以&amp;quot;go build&amp;quot;編譯成原生碼(native code), go的效能就高出甚多了, 不過以這比較也不算準啦&amp;hellip;. &lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;
via Blogger &lt;a href="http://bit.ly/POcYPv"&gt;http://bit.ly/POcYPv&lt;/a&gt;&lt;/p&gt;</description></item></channel></rss>