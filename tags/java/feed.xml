<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Le murmure de Julian</title><link>https://blog.jln.co/tags/java/</link><description>Recent content in Java on Le murmure de Julian</description><generator>Hugo</generator><language>zh-tw</language><managingEditor>julianshen22@gmail.com (Julian Shen)</managingEditor><webMaster>julianshen22@gmail.com (Julian Shen)</webMaster><lastBuildDate>Sat, 25 Mar 2017 20:55:24 +0000</lastBuildDate><atom:link href="https://blog.jln.co/tags/java/feed.xml" rel="self" type="application/rss+xml"/><item><title>[Java] Mockito的doReturn和thenReturn</title><link>https://blog.jln.co/Java-Mockito%E7%9A%84doReturn%E5%92%8CthenReturn/</link><pubDate>Sat, 25 Mar 2017 20:55:24 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Java-Mockito%E7%9A%84doReturn%E5%92%8CthenReturn/</guid><description>&lt;p&gt;在做測試時, 利用假資料來做測試還算是一個蠻常被利用的技巧, 除了可以減少測試中的變動因子, 維持測試的scope的穩定度, 避免因為非程式本身造成的問題影響測試外, 還有就是在有跟別人API的對接的場合, 在還沒實際的API測試時, 一樣可以測試介面實作有沒問題&lt;/p&gt;</description></item><item><title>[Java] 關於retrofit的一些奇技</title><link>https://blog.jln.co/Java-%E9%97%9C%E6%96%BCretrofit%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80/</link><pubDate>Sun, 12 Mar 2017 12:07:35 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Java-%E9%97%9C%E6%96%BCretrofit%E7%9A%84%E4%B8%80%E4%BA%9B%E5%A5%87%E6%8A%80/</guid><description>&lt;p&gt;&lt;a href="http://square.github.io/retrofit/"&gt;Retrofit&lt;/a&gt;一直是一套在開發REST client一個相當好用的工具, 不只可以應用在Android上, 而是在任何Java相關的, 不管是獨立的App, 或是Server端的開發, 都相當好用&lt;/p&gt;</description></item><item><title>[Java] 用MockWebServer測試REST client</title><link>https://blog.jln.co/Java-%E7%94%A8MockWebServer%E6%B8%AC%E8%A9%A6REST-client/</link><pubDate>Wed, 08 Mar 2017 21:42:36 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Java-%E7%94%A8MockWebServer%E6%B8%AC%E8%A9%A6REST-client/</guid><description>&lt;p&gt;應該來規定自己一週至少要寫一篇文章的, 這禮拜剛回歸工作的生活, 回歸了Java, 先從今天算起, 看多久能寫個一篇&lt;/p&gt;
&lt;p&gt;這次來寫寫怎麼測試REST client, 測試最直覺的當然是讓Client直接連到Server, 但這樣變數比較多, 比如說網路斷了呀, Server掛掉了呀, 測試資料也不穩定(資料庫內的資料並不一定是固定的), 不太利於自動化測試, 如果只是要測試Client邏輯, 自然擺脫這些因素比較好, 餵假資料(設計好的資料)是比較好的選擇&lt;/p&gt;</description></item><item><title>[Android] 把Github當Maven repository用</title><link>https://blog.jln.co/Android-%E6%8A%8AGithub%E7%95%B6Maven-repository%E7%94%A8/</link><pubDate>Tue, 27 Dec 2016 15:39:59 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android-%E6%8A%8AGithub%E7%95%B6Maven-repository%E7%94%A8/</guid><description>&lt;p&gt;自從Android導入gradle之後, 使用開放的第三方的程式庫就越來越方便了, 雖然方便, 但也不免會碰到這類的問題:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;想要的功能在master branch上更新了, 但卻遲遲不release以至於想用新的功能無法用&lt;/li&gt;
&lt;li&gt;程式碼已經沒在維護了, maven repository上一直都還是有問題的舊版本, 明知道怎麼修卻無法代他release到maven repository上去, PR又遲遲沒人理&lt;/li&gt;
&lt;li&gt;想加上自己的私有功能, 又不想包整包source codes到app裡面去&lt;/li&gt;
&lt;li&gt;想要開放自己做的程式庫卻覺得release到maven很麻煩&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;還好有&lt;a href="https://jitpack.io/"&gt;Jitpack&lt;/a&gt;這東西, 剛剛就是碰到一個東西有問題, 想把它修掉直接用, 研究了一下&lt;/p&gt;</description></item></channel></rss>