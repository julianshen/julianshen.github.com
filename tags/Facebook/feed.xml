<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Facebook on Le murmure de Julian</title><link>https://blog.jln.co/tags/Facebook/</link><description>Recent content in Facebook on Le murmure de Julian</description><generator>Hugo</generator><language>zh-tw</language><managingEditor>julianshen22@gmail.com (Julian Shen)</managingEditor><webMaster>julianshen22@gmail.com (Julian Shen)</webMaster><lastBuildDate>Tue, 18 Oct 2016 21:01:31 +0000</lastBuildDate><atom:link href="https://blog.jln.co/tags/Facebook/feed.xml" rel="self" type="application/rss+xml"/><item><title>Account Kit samples for Swift</title><link>https://blog.jln.co/Account-Kit-samples-for-Swift/</link><pubDate>Tue, 18 Oct 2016 21:01:31 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Account-Kit-samples-for-Swift/</guid><description>&lt;p&gt;做一個網路服務, 使用者驗證是蠻麻煩的一件事, 我們是可以裝作沒看到, 不做驗證, 但這樣的下場就是有假使用者, 有殭屍, 最簡單的方式是信任第三方服務像是Google, Facebook,
現在的人大多數都有Google, Facebook帳號了, 這樣其實也沒多大的問題, 但還是還是有人沒有, 而且也不是每個人都放心把Facebook帳號交給我們, 因此退而求其次就是用E-mail,
用E-mail認證雖然也是一個好方式, 但還是要建置整套發信機制(或是花錢買mailgun來送信), 而且在手機上就麻煩了, 來回在App跟e-mail間切換很不方便,
因此就會想用簡訊認證, 至於簡訊認證, 除了一個&amp;quot;貴&amp;quot;字以外, 要搞定各個國家的也是一個麻煩(當然, 花錢可解, 有Twilio這種服務可以用)&lt;/p&gt;</description></item><item><title>[筆記] "Unsafe JavaScript attempt to access frame with URL" error with Facebook Javascript API</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98-Unsafe-JavaScript-attempt-to-access-frame-with-URL-error-with-Facebook-Javascript-API/</link><pubDate>Thu, 08 Mar 2012 01:09:02 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98-Unsafe-JavaScript-attempt-to-access-frame-with-URL-error-with-Facebook-Javascript-API/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;The following example shows how to create a simple Facebook login button with Facebook javascript API:&lt;/p&gt; &lt;p&gt; &lt;script src="https://gist.github.com/1994297.js?file=gistfile1.phtml"&gt;&lt;/script&gt;&lt;/p&gt; &lt;p&gt;Normally, this page would be reloaded if user finished authorized your app. But it won&amp;rsquo;t be reloaded in Chrome due to the follwing error:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;span style="color: #ff0000;"&gt;Unsafe JavaScript attempt to access frame with URL&lt;/span&gt; &lt;a href="https://s-static.ak.fbcdn.net/connect/xd_proxy.php?version=3#cb=f363e58d9"&gt;https://s-static.ak.fbcdn.net/connect/xd_proxy.php?version=3#cb=f363e58d9&lt;/a&gt;&amp;amp;origin=http%3A%2F%2Fwww.ab.com%2Ffcb27588&amp;amp;relation=opener&amp;amp;transport=postmessage&amp;amp;frame=fac4c0f18&amp;amp;access_token=AAAEHZBpoK3B0BALv8Cf96gaKEnn4ZBtXgjCOQCFFhVDL4K0rZAE2NGDcqZCPlZByNNKEDmYSGKHQv8jAUM2yGZCHkOcyXUKhoZD&amp;amp;expires_in=0&amp;amp;signed_request=g7sYd_XQx-EBPtQQGk-0ISRMrUDnT4L4WHAmlNsVFBU.eyJhbGdvcml0aG0iOiJITUFDLVNIQTI1NiIsImNvZGUiOiJBUURKYkZBNjZuemduSDBBN0dXWmd2SGxZZkQxQVp4Qm1MSnc0Z3ppUV9FQ25VeEYyZmcyTmJGcFh3UHZDeWhyYnFrT1RxNmRVc2xsb0d4dlFCd290UjRyV0ZsSnJtVjFoNy1QUTlJbTRROXh3MmNKMGU1b0NReWtmT1ZZcXhMUDRVRldVSDgwVU5ic1BLTHdyNk80cFlSVVItQzNIYjhyRWgxek40ZFEzSkpreXhBcU1KSHljcWxETzh2dF96T3ZpN0EiLCJpc3N1ZWRfYXQiOjEzMzExMzg3MjQsInVzZXJfaWQiOiIxMTI5MjgzNDM3In0 from frame with URL &lt;a href="http://www.ab.com/login.html"&gt;http://www.ab.com/login.html&lt;/a&gt;. Domains, protocols and ports must match.&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;Some people use FB.getLoginStatus() to check if user authorized app at page loaded. If page could be reloaded, it&amp;rsquo;s no problem. However, in this case, it&amp;rsquo;s not. &lt;/p&gt;</description></item><item><title>Social Network的 人、事、時、地、物</title><link>https://blog.jln.co/Social-Network%E7%9A%84-%E4%BA%BA%E4%BA%8B%E6%99%82%E5%9C%B0%E7%89%A9/</link><pubDate>Mon, 26 Sep 2011 23:18:09 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Social-Network%E7%9A%84-%E4%BA%BA%E4%BA%8B%E6%99%82%E5%9C%B0%E7%89%A9/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;我們的生活周遭不外乎就是以人、事、時、地、物 所構成, 人與人之間的互動, 事件的發生 等等&lt;/p&gt; &lt;p&gt;每個Social Network Service正是在想辦法把我們的生活的縮影給數位化, 網路化&lt;/p&gt; &lt;ol&gt;&lt;li&gt;人: Personal profile, Friends, Lists, Group&amp;hellip;.虛擬著人與人之間互動的關係&lt;/li&gt; &lt;li&gt;事: What&amp;rsquo;s on your mind? What&amp;rsquo;s happening? 什麼事情即將發生或發生過(events)&lt;/li&gt; &lt;li&gt;時: 每個事件, 動作都會帶著時間&lt;/li&gt; &lt;li&gt;地: Check in是沒意義的動作, 只是好玩, 但如果事件或想法帶著地點就不同了, 那代表事情的發生地點, 或是你在啥地方激發了你的想法&lt;/li&gt; &lt;li&gt;物: 吃食物, 看電影, 聽音樂, 讀一本書&amp;hellip;我們時時刻刻無不跟東西在互動&lt;/li&gt; &lt;/ol&gt;&lt;p&gt;Google+對Social network的解答是隱私權(Circle), 是分享(Reshare, auto upload), 是溝通(Hangout), 但Facebook卻是從人出發(Profile, Timeline, 最早由Profile), 到Open Graph (與物的互動), 想盡辦法縮影我們的生活, 雖然有很多爭議點, 我認為, 現階段G+還是無法抗衡, 比較起來, Facebook目前還是比Google懂社群 (純個人意見抒發)&lt;/p&gt;</description></item><item><title>[筆記] Translate open graph activity</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98-Translate-open-graph-activity/</link><pubDate>Mon, 26 Sep 2011 18:33:23 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98-Translate-open-graph-activity/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;ol&gt;&lt;li&gt;Go to Facebook developer :&lt;a href="https://developers.facebook.com/apps"&gt; &lt;/a&gt;&lt;a href="https://developers.facebook.com/apps"&gt;https://developers.facebook.com/apps&lt;/a&gt;&lt;/li&gt; &lt;li&gt;Select your app&lt;/li&gt; &lt;li&gt;Click &amp;ldquo;Edit Setting&amp;rdquo;&lt;/li&gt; &lt;li&gt;Choose &amp;ldquo;Translate your app&amp;rdquo; at left hand side&lt;/li&gt; &lt;li&gt;You&amp;rsquo;ll see a form as following. Select your language and translate all messages:&lt;/li&gt; &lt;/ol&gt;&lt;div class="p_embed p_image_embed"&gt; &lt;a href="http://posterous.com/getfile/files.posterous.com/temp-2011-09-26/gJsBdvlFmemmIuykxJzqHGujoiAtmvvEHsiJBkqpDrthffAqDBHEEqGIFlwb/_2011-09-26_6.32.03.png.scaled1000.png"&gt;&lt;img alt="_2011-09-26_6" height="182" src="http://posterous.com/getfile/files.posterous.com/temp-2011-09-26/gJsBdvlFmemmIuykxJzqHGujoiAtmvvEHsiJBkqpDrthffAqDBHEEqGIFlwb/_2011-09-26_6.32.03.png.scaled500.png" width="500"/&gt;&lt;/a&gt; &lt;/div&gt; &lt;/div&gt;</description></item><item><title>[筆記][測試] Facebook Open graph + Heroku + node.js</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98%E6%B8%AC%E8%A9%A6-Facebook-Open-graph--Heroku--node.js/</link><pubDate>Mon, 26 Sep 2011 01:28:43 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98%E6%B8%AC%E8%A9%A6-Facebook-Open-graph--Heroku--node.js/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;Open graph的確是個好物, 雖然說早在去年的f8就已經推出了, 但現在更加完備了, 其實也等不及看會有啥應用推出了, 當然自己也想來玩看看,  本想照&lt;a href="https://developers.facebook.com/docs/beta/opengraph/tutorial/"&gt;Tutorial&lt;/a&gt;依樣畫葫蘆抄一個體驗看看, 又覺這樣太無聊, 又想說試看看heroku + node.js, 沒真的玩過node.js, 就拿這題目試試&lt;/p&gt;</description></item><item><title>在Heroku上建立一個以Node.js開發的Facebook應用程式</title><link>https://blog.jln.co/%E5%9C%A8Heroku%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E4%BB%A5Node.js%E9%96%8B%E7%99%BC%E7%9A%84Facebook%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F/</link><pubDate>Fri, 23 Sep 2011 05:27:32 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E5%9C%A8Heroku%E4%B8%8A%E5%BB%BA%E7%AB%8B%E4%B8%80%E5%80%8B%E4%BB%A5Node.js%E9%96%8B%E7%99%BC%E7%9A%84Facebook%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;這篇算筆記, 有可能會有一些失落環節在, 主要從create Facebook application到可以在local端執行&lt;/p&gt; &lt;p&gt;Facebook這月稍早時跟Heroku合作, 讓建立一個Facebook應用程式(含後端)更加方便: &lt;a href="http://developers.facebook.com/blog/post/558/"&gt;http://developers.facebook.com/blog/post/558/&lt;/a&gt; (有些步驟可以從這看)&lt;/p&gt;</description></item><item><title>My first "Timeline"</title><link>https://blog.jln.co/My-first-Timeline/</link><pubDate>Fri, 23 Sep 2011 04:16:08 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/My-first-Timeline/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;div class="p_embed p_image_embed"&gt; &lt;a href="http://posterous.com/getfile/files.posterous.com/temp-2011-09-22/AGwIvvenAfkGwcsklmCigkBGiAcycaayfEzIACJtiAetgCmwzipdrcIEdJtH/_2011-09-23_4.06.05.png.scaled1000.png"&gt;&lt;img alt="_2011-09-23_4" height="424" src="http://posterous.com/getfile/files.posterous.com/temp-2011-09-22/AGwIvvenAfkGwcsklmCigkBGiAcycaayfEzIACJtiAetgCmwzipdrcIEdJtH/_2011-09-23_4.06.05.png.scaled500.png" width="500"/&gt;&lt;/a&gt; &lt;/div&gt; &lt;div class="p_embed p_image_embed"&gt; &lt;a href="http://posterous.com/getfile/files.posterous.com/temp-2011-09-22/mkIusBdAvvqedkEmhttscjhhgxEcAJGvmicbHxBgHHFlkgkzzynocdlFIuwa/_2011-09-23_4.09.31.png.scaled1000.png"&gt;&lt;img alt="_2011-09-23_4" height="410" src="http://posterous.com/getfile/files.posterous.com/temp-2011-09-22/mkIusBdAvvqedkEmhttscjhhgxEcAJGvmicbHxBgHHFlkgkzzynocdlFIuwa/_2011-09-23_4.09.31.png.scaled500.png" width="500"/&gt;&lt;/a&gt; &lt;/div&gt; &lt;p&gt;Facebook今天發表的Timeline真是令人興奮的功能呀&lt;/p&gt; &lt;p&gt;現在應該再也沒人說很難用Facebook當日記了(雖然我講日記這概念講很久都沒去實現他)&amp;hellip;&lt;/p&gt;</description></item><item><title>Generating Facebook key hash for Android</title><link>https://blog.jln.co/Generating-Facebook-key-hash-for-Android/</link><pubDate>Tue, 10 May 2011 14:19:21 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Generating-Facebook-key-hash-for-Android/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;According to&lt;a href="http://developers.facebook.com/docs/guides/mobile/#android"&gt; Facebook mobile development document&lt;/a&gt; (Android), you need to generate a key hash for your application in order to apply Facebook SSO(Single Sign on).&lt;/p&gt; &lt;p&gt;Here is the formal way to do this:&lt;/p&gt; &lt;blockquote&gt; &lt;p&gt;&lt;span style="color: #99cc00;"&gt;keytool -exportcert -alias androiddebugkey -keystore ~/.android/debug.keystore | openssl sha1 -binary | openssl base64&lt;/span&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;But sometimes you won&amp;rsquo;t have a tradtional key store especially when building with Android open sources. Keys in Android open sources are in pk8 format. In order to generate key hashes with these keys, you need to tranfer them into a pk12 key store.&lt;/p&gt;</description></item><item><title>[筆記]一些FQLs</title><link>https://blog.jln.co/%E7%AD%86%E8%A8%98%E4%B8%80%E4%BA%9BFQLs/</link><pubDate>Thu, 05 May 2011 09:50:34 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E7%AD%86%E8%A8%98%E4%B8%80%E4%BA%9BFQLs/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;本來是放在我EverNotes內的, 貼一些出來好了, 無聊時玩玩的東西, 沒優化過:&lt;/p&gt; &lt;ul&gt;&lt;li&gt;共同喜歡的Page : select name from page where page_id in (select page_id from page_fan where uid=&lt;strong&gt;friend_uid&lt;/strong&gt; and page_id in (select page_id from page_fan where uid=&lt;strong&gt;me()&lt;/strong&gt;))&lt;/li&gt; &lt;li&gt;共同朋友: select name from user where uid in (select uid2 from friend where uid1=me()) and uid in (select uid2 from friend where uid1=&lt;strong&gt;friend_uid&lt;/strong&gt;)&lt;/li&gt; &lt;li&gt;同時都出現的照片: select src from photo where pid in (select pid from photo_tag where subject=&lt;strong&gt;friend_uid&lt;/strong&gt;) and pid in (select pid from photo_tag where subject=me())&lt;/li&gt; &lt;li&gt;屬於某Group的照片: select src from photo where pid in (select pid from photo_tag where subject=&lt;strong&gt;group_id&lt;/strong&gt;)&lt;/li&gt; &lt;li&gt;共同參加的活動: select name from event where eid in (select eid from event_member where uid=me() and rsvp_status=&amp;lsquo;attending&amp;rsquo;) and eid in (select eid from event_member where uid=&lt;strong&gt;friend_id&lt;/strong&gt; and rsvp_status='attending&amp;rsquo;)&lt;/li&gt; &lt;li&gt;都去過的地方(僅限於自己checkin不包含被tag): select name from place where page_id in (select page_id from checkin where author_uid=me()) and page_id in (select page_id from checkin where author_uid=&lt;strong&gt;friend_uid&lt;/strong&gt;)&lt;/li&gt; &lt;li&gt;喜歡過的某人的post:  select message from stream where post_id in (select post_id from like where post_id in (SELECT post_id FROM stream WHERE source_id=&lt;strong&gt;friend_uid&lt;/strong&gt;) and user_id=me())&lt;/li&gt; &lt;li&gt;Comments on someone&amp;rsquo;s post: select text from comment where post_id in (SELECT post_id FROM stream WHERE source_id=&lt;strong&gt;friend_uid&lt;/strong&gt;) and fromid=me()&lt;/li&gt; &lt;/ul&gt;&lt;p&gt;其中&amp;quot;me()&amp;ldquo;是自己, 有些FQL裡的&amp;quot;me()&amp;quot;可以代換成另一個人的uid&lt;/p&gt;</description></item><item><title>Recognize your friend with Face.com</title><link>https://blog.jln.co/Recognize-your-friend-with-Face.com/</link><pubDate>Sun, 01 May 2011 21:26:35 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Recognize-your-friend-with-Face.com/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;替照片上的每個人都加上標籤(tag)是一個蠻好用的功能, 這可以方便你找到有某人的照片, 或是一群人在某時的合照, 如果善加利用是相當好用的功能, 目前主流的幾個相片服務像是Flickr, Facebook, Picasa等等, 都有這樣的功能&lt;/p&gt;</description></item><item><title>Facebook 能做些什麼？</title><link>https://blog.jln.co/Facebook-%E8%83%BD%E5%81%9A%E4%BA%9B%E4%BB%80%E9%BA%BC/</link><pubDate>Sat, 19 Mar 2011 02:03:10 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Facebook-%E8%83%BD%E5%81%9A%E4%BA%9B%E4%BB%80%E9%BA%BC/</guid><description>&lt;div class="posterous_autopost"&gt;剛在捷運上看到一位小姐拿著iPhone 在看她Facebook上的news feed。她同時也編輯著她Bump上的資訊(我猜可能是新買的手機吧)，我就開始在想，Facebook現在越來越壯大了，加上智慧型手機也越來越普及，social network從你家的電腦走出來到手機上了，Facebook可以再多做些什麼？從這個例子當然可以說，或許可以拿Bump來跟正妹交換Facebook帳號（哈，我沒這樣做啦），不過這也只能算是一個簡單的小應用而已。&lt;p&gt;從groupon, live social甚至最近新出來的level up，不難明顯看出社群經濟越來越熱門，當然Facebook身為社群網站的龍頭老大並沒有置身事外，也有credit和deal，最近甚至還有租片服務以及MLB live streaming，這些都是可以化為ㄧ波商機，我覺得加上手機後，能做的應該更多了，比如說可以銷售演唱會入場券，透過手機就可以存取並查驗票之類的，透過Facebook廣大的使用者，不但可以邀約朋友同行還可以送這樣的東西給朋友當禮物。&lt;/p&gt;</description></item><item><title>[Facebook][筆記] 尋找user id和page id</title><link>https://blog.jln.co/Facebook%E7%AD%86%E8%A8%98-%E5%B0%8B%E6%89%BEuser-id%E5%92%8Cpage-id/</link><pubDate>Sat, 12 Mar 2011 20:52:36 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Facebook%E7%AD%86%E8%A8%98-%E5%B0%8B%E6%89%BEuser-id%E5%92%8Cpage-id/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;自從Facebook可以讓user指定name後, page和profile的url就變成這形式了:&lt;/p&gt; &lt;p&gt;&lt;a href="http://www.facebook.com/YoYoMa"&gt;http://www.facebook.com/YoYoMa&lt;/a&gt;&lt;/p&gt; &lt;p&gt;雖然說Graph API可以用name, 但對REST API和FQL就大多需要ID, 傷腦筋&lt;/p&gt; &lt;p&gt;還好, 這些還在html source裡面, 打開查:&lt;/p&gt;</description></item><item><title>凡走過必留下痕跡</title><link>https://blog.jln.co/%E5%87%A1%E8%B5%B0%E9%81%8E%E5%BF%85%E7%95%99%E4%B8%8B%E7%97%95%E8%B7%A1/</link><pubDate>Wed, 16 Feb 2011 04:42:29 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/%E5%87%A1%E8%B5%B0%E9%81%8E%E5%BF%85%E7%95%99%E4%B8%8B%E7%97%95%E8%B7%A1/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;&lt;span style="font-size: medium;"&gt;&amp;ldquo;凡走過必留下痕跡&amp;rdquo;&lt;/span&gt;&lt;/p&gt; &lt;p&gt;這是很久之前綜藝節目尋人單元 - 超級任務 裡 阿亮的台詞&lt;/p&gt; &lt;p&gt;今天在想, 如果當年就已經有了Facebook而且就已經像現在這麼的流行熱門的話, 尋人任務應該會更加的簡單吧, 畢竟所有Facebook上的使用者, 不管是自願或是非自願, 多多少少就已經留下痕跡了&lt;/p&gt;</description></item><item><title>[Android][筆記] Single Sign on with Facebook SDK</title><link>https://blog.jln.co/Android%E7%AD%86%E8%A8%98-Single-Sign-on-with-Facebook-SDK/</link><pubDate>Fri, 24 Dec 2010 18:32:04 +0000</pubDate><author>julianshen22@gmail.com (Julian Shen)</author><guid>https://blog.jln.co/Android%E7%AD%86%E8%A8%98-Single-Sign-on-with-Facebook-SDK/</guid><description>&lt;div class="posterous_autopost"&gt;&lt;p&gt;透過Facebook Android SDK去sign in Facebook其實很單純, 只需要這樣幾行code:&lt;/p&gt; &lt;blockquote&gt; &lt;p class="p1"&gt;&lt;span class="s1"&gt;if&lt;/span&gt; (!&lt;span class="s2"&gt;facebook&lt;/span&gt;.isSessionValid()) {&lt;/p&gt; &lt;p class="p1"&gt;&lt;span class="s2"&gt;&lt;span style="color: #000000;"&gt;    &lt;/span&gt;facebook&lt;/span&gt;.authorize(&lt;span class="s1"&gt;this&lt;/span&gt;, &lt;span class="s1"&gt;new&lt;/span&gt; String[] { &lt;span class="s3"&gt;&amp;ldquo;publish_stream&amp;rdquo;&lt;/span&gt; }, &lt;span class="s1"&gt;new&lt;/span&gt; AuthDialogListener());&lt;/p&gt; &lt;p class="p1"&gt;}&lt;/p&gt; &lt;/blockquote&gt; &lt;p&gt;其中AuthDialogListener是繼承自Facebook.DialogListener, 因為Authentication dialog是由Facebook SDK處理的, 應用程式只要負責處理onComplete, onError等等callback&lt;/p&gt;</description></item></channel></rss>